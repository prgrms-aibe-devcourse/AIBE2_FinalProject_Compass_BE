
1 엔티티 도출
유스케이스와 요구사항에서 명사를 추출하여 다음과 같은 핵심 엔티티를 도출했습니다.

👤 User (사용자)

id: UUID (PK)

email: String (고유 식별자, Unique)

password: String (해시화하여 저장)

nickname: String (Unique)

profileImageUrl: String

preferredRegion: String (선호 지역)

provider: Enum (LOCAL, GOOGLE, KAKAO)

role: Enum (USER, ADMIN)

status: Enum (ACTIVE, WITHDRAWN) - 회원 탈퇴 상태

is2faEnabled: Boolean - 2단계 인증 여부

createdAt, updatedAt: Timestamp

🗺️ Place (장소)

id: UUID (PK)

name: String

address: String

category: String

latitude, longitude: Double

⭐ Review (리뷰)

id: UUID (PK)

userId: UUID (FK → User)

placeId: UUID (FK → Place)

content: Text

rating: Integer

status: Enum (PENDING, APPROVED, REJECTED) - 콘텐츠 승인

✈️ TripPlan (여행 계획)

id: UUID (PK)

userId: UUID (FK → User)

title: String

startDate, endDate: Date

📍 TripPlanItem (여행 계획 항목)

id: UUID (PK)

tripPlanId: UUID (FK → TripPlan)

placeId: UUID (FK → Place)

dayNumber, visitOrder: Integer

🎁 CurationPackage (큐레이션 패키지)

id: UUID (PK)

createdBy: UUID (FK → User, 관리자)

title: String

description: Text

theme: String

🎀 CurationPackageItem (큐레이션 항목)

id: UUID (PK)

packageId: UUID (FK → CurationPackage)

placeId: UUID (FK → Place)

visitOrder: Integer

📜 LoginHistory (로그인 기록)

id: UUID (PK)

userId: UUID (FK → User)

ipAddress: String

deviceInfo: Text

loginAt: Timestamp

📊 UserActivity (사용자 활동 로그)

id: BIGSERIAL (PK)

userId: UUID (FK → User)

activityType: String (e.g., VIEW_PLACE, CREATE_REVIEW)

targetId: String (활동 대상의 ID)

abTestGroup: String (A/B 테스트 그룹)

createdAt: Timestamp

2 관계 설정
User ↔ Review: 1:N (한 명의 사용자는 여러 리뷰를 작성할 수 있음)

Place ↔ Review: 1:N (하나의 장소에는 여러 리뷰가 달릴 수 있음)

User ↔ TripPlan: 1:N (한 명의 사용자는 여러 여행 계획을 가질 수 있음)

TripPlan ↔ Place: N:M (TripPlanItem 테이블을 통해 관계를 해결)

CurationPackage ↔ Place: N:M (CurationPackageItem 테이블을 통해 관계를 해결)

User ↔ LoginHistory: 1:N (한 명의 사용자는 여러 로그인 기록을 가짐)

User ↔ UserActivity: 1:N (한 명의 사용자는 여러 활동 로그를 남김)

3 ERD 다이어그램 (SQL)
SQL

-- 사용자 테이블
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255),
    nickname VARCHAR(100) UNIQUE,
    profile_image_url VARCHAR(500),
    preferred_region VARCHAR(100),
    provider VARCHAR(50) DEFAULT 'LOCAL' NOT NULL,
    role VARCHAR(50) DEFAULT 'USER' NOT NULL,
    status VARCHAR(50) DEFAULT 'ACTIVE' NOT NULL,
    is_2fa_enabled BOOLEAN DEFAULT FALSE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 장소 테이블
CREATE TABLE places (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    address VARCHAR(500),
    category VARCHAR(100),
    latitude DOUBLE PRECISION,
    longitude DOUBLE PRECISION
);

-- 리뷰 테이블
CREATE TABLE reviews (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    place_id UUID NOT NULL REFERENCES places(id) ON DELETE CASCADE,
    content TEXT,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    status VARCHAR(50) DEFAULT 'PENDING' NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 여행 계획 테이블
CREATE TABLE trip_plans (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    start_date DATE,
    end_date DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 여행 계획-장소 연결 테이블
CREATE TABLE trip_plan_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    trip_plan_id UUID NOT NULL REFERENCES trip_plans(id) ON DELETE CASCADE,
    place_id UUID NOT NULL REFERENCES places(id) ON DELETE CASCADE,
    day_number INTEGER,
    visit_order INTEGER
);

-- 큐레이션 패키지 테이블
CREATE TABLE curation_packages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_by UUID NOT NULL REFERENCES users(id),
    title VARCHAR(255) NOT NULL,
    description TEXT,
    theme VARCHAR(100),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 큐레이션-장소 연결 테이블
CREATE TABLE curation_package_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    package_id UUID NOT NULL REFERENCES curation_packages(id) ON DELETE CASCADE,
    place_id UUID NOT NULL REFERENCES places(id) ON DELETE CASCADE,
    visit_order INTEGER
);

-- 로그인 기록 테이블
CREATE TABLE login_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    ip_address VARCHAR(50),
    device_info TEXT,
    login_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 사용자 활동 로그 테이블 (추천 시스템용)
CREATE TABLE user_activities (
    id BIGSERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    activity_type VARCHAR(50) NOT NULL, -- 'VIEW_PLACE', 'CREATE_REVIEW' 등
    target_id VARCHAR(255), -- 활동 대상의 ID (place_id, review_id 등)
    ab_test_group VARCHAR(50), -- A/B 테스트 그룹 ('A', 'B' 등)
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);