spring:
  config:
    activate:
      on-profile: prod
      
  datasource:
    # AWS RDS PostgreSQL 연결 설정
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT:5432}/${DB_NAME:compass}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    
    # 연결 풀 최적화 (운영 환경)
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      leak-detection-threshold: 60000
    
  jpa:
    hibernate:
      ddl-auto: create  # 테이블 강제 생성을 위해 임시 변경
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          time_zone: Asia/Seoul
    show-sql: false
    
  redis:
    # 운영용 Redis 설정 (필요시 수정)
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 10000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
        max-wait: -1ms
    
  ai:
    # OpenAI 설정 (운영 환경에서는 실제 키 필요)
    openai:
      api-key: ${OPENAI_API_KEY:test-key-for-development}
      chat:
        options:
          model: gpt-4o-mini
          temperature: 0.7
          max-tokens: 2000
    
    # Vertex AI 설정 (운영 환경에서는 실제 프로젝트 ID 필요)
    vertex:
      ai:
        gemini:
          project-id: ${GOOGLE_CLOUD_PROJECT_ID:test-project-for-development}
          location: ${GOOGLE_CLOUD_LOCATION:asia-northeast3}
          chat:
            options:
              model: gemini-2.0-flash
              temperature: 0.7
              max-output-tokens: 2048
              top-p: 0.95
              top-k: 40
    
    # Redis Vector Store 설정 (운영용)
    vectorstore:
      redis:
        index: compass-embeddings-prod
        prefix: "compass-prod:"
        
# JWT 설정 (운영 환경)
jwt:
  secret: ${JWT_SECRET:prod-access-secret-key-12345678901234567890123456789012345678901234567890}
  refresh-secret: ${JWT_REFRESH_SECRET:prod-refresh-secret-key-12345678901234567890123456789012345678901234567890}
  access-expiration: ${JWT_ACCESS_EXPIRATION:3600000}  # 1시간
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}  # 7일
    
# 운영 환경 서버 설정
server:
  port: ${SERVER_PORT:8080}
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
    
# 운영 환경 로깅 설정
logging:
  level:
    com.compass: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.springframework.ai: INFO
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/compass-prod.log
    max-size: 100MB
    max-history: 30
    
# Actuator 설정 (운영 환경)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized
      
# Swagger 설정 (운영 환경에서는 비활성화)
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false
