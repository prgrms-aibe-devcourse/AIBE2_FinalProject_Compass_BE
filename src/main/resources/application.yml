spring:
  application:
    name: compass-backend
    
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:compass}
    username: ${DB_USERNAME:compass_user}
    password: ${DB_PASSWORD:compass_password}
    driver-class-name: org.postgresql.Driver
    
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
    
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    
  security:
    user:
      name: user
      password: password
    jwt:
      access-secret: ${JWT_ACCESS_SECRET:your-256-bit-secret-key-for-access-token}
      refresh-secret: ${JWT_REFRESH_SECRET:your-256-bit-secret-key-for-refresh-token}
      access-expiration: 3600000  # 1 hour
      refresh-expiration: 604800000  # 7 days


    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - profile
              - email
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET} # 시크릿 키를 사용하는 경우에만 추가
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
              - account_email
            client-name: Kakao
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
      
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          model: gpt-4o-mini
          temperature: 0.7
    
    vertex:
      ai:
        gemini:
          project-id: ${GOOGLE_CLOUD_PROJECT_ID}
          location: ${GOOGLE_CLOUD_LOCATION:us-central1}
          chat:
            options:
              model: gemini-2.0-flash
              temperature: 0.7
    
    vectorstore:
      redis:
        index: compass-embeddings
        prefix: "compass:"

# AWS S3 Configuration
aws:
  s3:
    bucket-name: ${AWS_S3_BUCKET_NAME:compass-media-bucket}
    region: ${AWS_S3_REGION:ap-northeast-2}
    access-key: ${AWS_ACCESS_KEY_ID}
    secret-key: ${AWS_SECRET_ACCESS_KEY}
    url-expiration-minutes: ${AWS_S3_URL_EXPIRATION:60}

# File Upload Configuration
spring.servlet.multipart:
  max-file-size: 50MB
  max-request-size: 50MB
  enabled: true

# Application Specific Configuration
app:
  file:
    max-size: 52428800  # 50MB in bytes
    max-width: 4096     # Maximum image width in pixels
    max-height: 4096    # Maximum image height in pixels
    allowed-extensions: jpg,jpeg,png,gif,bmp,webp,tiff,svg
    temp-dir: ${java.io.tmpdir}/compass-media
  
  ocr:
    enabled: ${OCR_ENABLED:true}
    tesseract:
      path: ${TESSERACT_PATH:/usr/bin/tesseract}  # Path to tesseract executable
      language: ${OCR_LANGUAGE:kor+eng}           # OCR languages (Korean + English)
      timeout-seconds: ${OCR_TIMEOUT:30}          # OCR processing timeout
    async:
      enabled: ${OCR_ASYNC_ENABLED:true}
      thread-pool-size: ${OCR_THREAD_POOL_SIZE:5}

server:
  port: 8080
  
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      
logging:
  level:
    com.compass: DEBUG
    org.springframework.web: INFO
    org.springframework.security: DEBUG