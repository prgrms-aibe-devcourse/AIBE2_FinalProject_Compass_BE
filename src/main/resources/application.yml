spring:
  config:
    import: "optional:dotenv:.env" # .env 파일을 읽어옵니다.

  application:
    name: compass-backend
    
  datasource:
    # AWS RDS PostgreSQL 연결
    url: jdbc:postgresql://${DB_HOST:compass-db.ch6mum0221cb.ap-northeast-2.rds.amazonaws.com}:${DB_PORT:5432}/${DB_NAME:postgres}
    username: ${DB_USERNAME:compass}
    password: ${DB_PASSWORD:compass1004!}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000
      auto-commit: false  # 트랜잭션 문제 해결
    
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 20
          batch_versioned_data: true
    show-sql: false
    
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  security:
    user:
      name: user
      password: password
    jwt:
      secret: ${JWT_SECRET:your-256-bit-secret-key-for-access-token}
      refresh-secret: ${JWT_REFRESH_SECRET:your-256-bit-secret-key-for-refresh-token}
      access-expiration: 3600000  # 1 hour
      refresh-expiration: 604800000  # 7 days

    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - profile
              - email
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET} # 시크릿 키를 사용하는 경우에만 추가
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope:
              - profile_nickname
              - account_email
            client-name: Kakao
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
      
  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          model: gpt-4o-mini
          temperature: 0.7
    
    vertex:
      ai:
        gemini:
          project-id: ${GOOGLE_CLOUD_PROJECT_ID}
          location: ${GOOGLE_CLOUD_LOCATION:us-central1}
          chat:
            options:
              model: gemini-2.0-flash
              temperature: 0.7
    
    vectorstore:
      redis:
        index: compass-embeddings
        prefix: "compass:"

server:
  port: 8080
  
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}

      
logging:
  level:
    com.compass: DEBUG
    org.springframework.web: INFO
    org.springframework.security: DEBUG

# AWS S3 Configuration
aws:
  access-key-id: ${AWS_ACCESS_KEY_ID:dummy-access-key}
  secret-access-key: ${AWS_SECRET_ACCESS_KEY:dummy-secret-key}
  region: ${AWS_REGION:ap-northeast-2}
  s3:
    bucket-name: ${AWS_S3_BUCKET_NAME:compass-media-bucket}
    base-url: ${AWS_S3_BASE_URL:https://compass-media-bucket.s3.ap-northeast-2.amazonaws.com}

# JWT Configuration for JwtTokenProvider
jwt:
  secret: ${JWT_ACCESS_SECRET:your-256-bit-secret-key-for-access-token}
  refresh-secret: ${JWT_REFRESH_SECRET:your-256-bit-secret-key-for-refresh-token}
  access-expiration: 3600000  # 1 hour
  refresh-expiration: 604800000  # 7 days