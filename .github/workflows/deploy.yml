# 워크플로우 이름
name: Deploy Spring Boot to AWS Elastic Beanstalk using OIDC

# 워크플로우 실행 조건: main 브랜치에 push 이벤트가 발생했을 때
on:
  push:
    branches: [ "main" ]

# 워크플로우에서 사용할 환경 변수 (리포지토리 시크릿 참조)
env:
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  EB_APPLICATION_NAME: ${{ secrets.EB_APPLICATION_NAME }}
  EB_ENVIRONMENT_NAME: ${{ secrets.EB_ENVIRONMENT_NAME }}
  AWS_REGION: ap-northeast-2 # 리전은 본인 환경에 맞게 수정
  GCP_SERVICE_ACCOUNT_JSON: ${{ secrets.GCP_SERVICE_ACCOUNT_JSON }}

# OIDC 인증을 위한 권한 설정 (필수!)
permissions:
  id-token: write # GitHub Actions가 OIDC 토큰을 요청할 수 있도록 허용
  contents: read  # 소스 코드를 체크아웃하기 위해 필요

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production # GitHub Environment를 사용하는 경우 (선택사항)

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 17 설정 (프로젝트에 맞는 버전으로 수정)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'gradle'

      # 3. Gradle 빌드 권한 부여 및 실행
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      - name: Run unit tests
        run: ./gradlew test --console=plain

      - name: Build with Gradle
        run: ./gradlew build -x test

      # 4. AWS 자격 증명 (OIDC 역할 수임)
      # GitHub Secrets에 저장된 AWS_ROLE_ARN을 사용하여 AWS 역할을 수임
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # 5. 배포 패키지 생성 (JAR + 기타 설정 파일)
      # Elastic Beanstalk은 zip 파일로 배포 패키지를 업로드해야 합니다.
      - name: Create deployment package
        run: |
          mkdir -p .ebextensions
          # 필요한 설정 파일이 있다면 .ebextensions 폴더에 추가할 수 있습니다.
          # 예: cp .ebextensions_example/logging.config .ebextensions/
          zip -r deploy.zip build/libs/*.jar .ebextensions .platform Procfile

      - name: Sync EB application environment
        run: |
          aws elasticbeanstalk update-environment \
            --application-name "${{ env.EB_APPLICATION_NAME }}" \
            --environment-name "${{ env.EB_ENVIRONMENT_NAME }}" \
            --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=GCP_SERVICE_ACCOUNT_JSON,Value="${GCP_SERVICE_ACCOUNT_JSON}"

      # 6. 배포 패키지를 S3에 업로드
      - name: Upload package to S3
        run: |
          aws s3 cp deploy.zip s3://${S3_BUCKET_NAME}/deploy-${{ github.sha }}.zip

      # 7. Elastic Beanstalk 애플리케이션 버전 생성
      - name: Create new Elastic Beanstalk version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --version-label "ver-${{ github.sha }}" \
            --source-bundle S3Bucket="${S3_BUCKET_NAME}",S3Key="deploy-${{ github.sha }}.zip" \
            --description "Commit SHA is ${{ github.sha }}"

      # 8. Elastic Beanstalk 환경에 새 버전 배포
      - name: Deploy new version to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --application-name ${{ env.EB_APPLICATION_NAME }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME }} \
            --version-label "ver-${{ github.sha }}"
