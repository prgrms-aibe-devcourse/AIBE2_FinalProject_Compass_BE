# 워크플로우 이름
name: Build Docker Image and Deploy to Elastic Beanstalk

# 워크플로우 실행 조건
on:
  push:
    branches: [ "main" ]

# 워크플로우에서 사용할 환경 변수
env:
  AWS_REGION: ap-northeast-2
  EB_APPLICATION_NAME: ${{ secrets.EB_APPLICATION_NAME }}
  EB_ENVIRONMENT_NAME: ${{ secrets.EB_ENVIRONMENT_NAME }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }} # ECR 리포지토리 이름을 GitHub Secret에 추가해야 합니다.

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. AWS 자격 증명 (OIDC 역할 수임)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Amazon ECR에 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Docker 이미지 빌드 및 ECR에 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # 5. 배포를 위한 Dockerrun.aws.json 파일 생성
      - name: Generate Dockerrun.aws.json
        run: |
          echo '{ \
            "AWSEBDockerrunVersion": "1", \
            "Image": { \
              "Name": "${{ steps.build-image.outputs.image }}", \
              "Update": "true" \
            }, \
            "Ports": [ \
              { \
                "ContainerPort": 8080, \
                "HostPort": 80 \
              } \
            ] \
          }' > Dockerrun.aws.json

      # 6. 배포 패키지 압축
      - name: Create deployment package
        run: zip -r deploy.zip Dockerrun.aws.json .ebextensions/ -R

      # 7. S3에 배포 패키지 업로드
      - name: Upload package to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        run: |
          aws s3 cp deploy.zip s3://$S3_BUCKET_NAME/deploy-${{ github.sha }}.zip

      # 8. Elastic Beanstalk 애플리케이션 버전 생성 및 배포
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID_DUMMY }} # OIDC 사용 시 값은 필요 없으나 파라미터는 존재해야 함
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DUMMY }} # OIDC 사용 시 값은 필요 없으나 파라미터는 존재해야 함
          application_name: ${{ env.EB_APPLICATION_NAME }}
          environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
          version_label: "ver-${{ github.sha }}"
          region: ${{ env.AWS_REGION }}
          deployment_package: deploy.zip