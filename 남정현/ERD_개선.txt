# 🔄 Sharing & Payment Domains ERD - 남정현

## 📋 담당 도메인
1. Sharing Domain: 콘텐츠 공유, 소셜 기능
2. Payment & Billing Domain: 결제, 크레딧 관리, 구독

---

# Domain 1: Sharing

## 📊 Entities

### 공유 콘텐츠
```sql
SharedContent {
    share_id: UUID (PK)
    content_type: ENUM('trip', 'review', 'media')
    content_id: UUID
    shared_by: UUID (FK → User Management Domain)
    share_url: VARCHAR(500) (UNIQUE)
    share_code: VARCHAR(20) (UNIQUE)
    visibility: ENUM('public', 'link_only', 'private')
    expires_at: TIMESTAMP
    view_count: INT DEFAULT 0
    created_at: TIMESTAMP
    updated_at: TIMESTAMP
}
```

### 공유 접근 권한
```sql
ShareAccess {
    access_id: UUID (PK)
    share_id: UUID (FK → SharedContent)
    user_id: UUID (FK → User Management Domain)
    permission: ENUM('view', 'comment', 'edit')
    accessed_at: TIMESTAMP
    created_at: TIMESTAMP
}
```

### 소셜 피드
```sql
SocialFeed {
    feed_id: UUID (PK)
    user_id: UUID (FK → User Management Domain)
    content_type: VARCHAR(50)
    content_id: UUID
    action: VARCHAR(50)
    visibility: ENUM('public', 'friends', 'private')
    created_at: TIMESTAMP
}
```

### 팔로우
```sql
Follow {
    follow_id: UUID (PK)
    follower_id: UUID (FK → User Management Domain)
    following_id: UUID (FK → User Management Domain)
    created_at: TIMESTAMP
    UNIQUE KEY (follower_id, following_id)
}
```

### 공유 통계
```sql
ShareStatistics {
    stat_id: UUID (PK)
    share_id: UUID (FK → SharedContent)
    date: DATE
    view_count: INT DEFAULT 0
    unique_viewers: INT DEFAULT 0
    share_count: INT DEFAULT 0
    created_at: TIMESTAMP
}
```

## 🔵 External APIs (Sharing Domain)

### Share Management
```yaml
POST /api/share/content:
  Description: "콘텐츠 공유"
  Body: { content_type, content_id, visibility, expires_in_hours? }
  Response: ShareResponse
  
GET /api/share/{shareCode}:
  Description: "공유 콘텐츠 조회"
  Response: SharedContentResponse
  
PUT /api/share/{shareId}:
  Description: "공유 설정 수정"
  Body: { visibility?, expires_at? }
  Response: ShareResponse
  
DELETE /api/share/{shareId}:
  Description: "공유 취소"
  Response: 204 No Content
  
POST /api/share/{shareId}/access:
  Description: "접근 권한 부여"
  Body: { user_id, permission }
  Response: ShareAccessResponse
```

### Social Features
```yaml
GET /api/social/feed:
  Description: "소셜 피드 조회"
  Query: page, size, filter?
  Response: SocialFeedResponse
  
POST /api/social/follow:
  Description: "사용자 팔로우"
  Body: { user_id }
  Response: FollowResponse
  
DELETE /api/social/follow/{userId}:
  Description: "언팔로우"
  Response: 204 No Content
  
GET /api/social/followers:
  Description: "팔로워 목록"
  Query: page, size
  Response: FollowerListResponse
  
GET /api/social/following:
  Description: "팔로잉 목록"
  Query: page, size
  Response: FollowingListResponse
```

### Share Statistics
```yaml
GET /api/share/{shareId}/stats:
  Description: "공유 통계"
  Query: period?
  Response: ShareStatisticsResponse
  
POST /api/share/{shareId}/view:
  Description: "조회수 증가"
  Response: { view_count: number }
```

## 🔴 Internal APIs (Sharing Domain)

```yaml
POST /api/internal/share/validate:
  Description: "공유 유효성 검증"
  Body: { share_id, user_id }
  
POST /api/internal/share/cleanup:
  Description: "만료된 공유 정리"
  
GET /api/internal/share/user/{userId}:
  Description: "사용자 공유 목록"
  Response: UserSharesResponse
```

---

# Domain 2: Payment & Billing

## 📊 Entities

### 사용자 크레딧
```sql
UserCredit {
    credit_id: UUID (PK)
    user_id: UUID (FK → User Management Domain, UNIQUE)
    balance: DECIMAL(10,2)
    bonus_balance: DECIMAL(10,2)
    total_earned: DECIMAL(10,2)
    total_spent: DECIMAL(10,2)
    updated_at: TIMESTAMP
    created_at: TIMESTAMP
}
```

### 크레딧 거래
```sql
CreditTransaction {
    transaction_id: UUID (PK)
    user_id: UUID (FK → User Management Domain)
    type: ENUM('purchase', 'usage', 'refund', 'bonus')
    amount: DECIMAL(10,2)
    balance_after: DECIMAL(10,2)
    description: TEXT
    reference_id: VARCHAR(255)
    created_at: TIMESTAMP
}
```

### 구독 플랜
```sql
SubscriptionPlan {
    plan_id: UUID (PK)
    name: VARCHAR(100)
    description: TEXT
    price: DECIMAL(10,2)
    credits_included: INT
    features: JSON
    billing_period: ENUM('monthly', 'yearly')
    is_active: BOOLEAN DEFAULT true
    created_at: TIMESTAMP
}
```

### 사용자 구독
```sql
UserSubscription {
    subscription_id: UUID (PK)
    user_id: UUID (FK → User Management Domain)
    plan_id: UUID (FK → SubscriptionPlan)
    status: ENUM('active', 'cancelled', 'expired', 'paused')
    start_date: DATE
    end_date: DATE
    auto_renew: BOOLEAN DEFAULT true
    created_at: TIMESTAMP
    updated_at: TIMESTAMP
}
```

### 결제 기록
```sql
Payment {
    payment_id: UUID (PK)
    user_id: UUID (FK → User Management Domain)
    amount: DECIMAL(10,2)
    currency: VARCHAR(3)
    payment_method: VARCHAR(50)
    payment_gateway: VARCHAR(50)
    gateway_transaction_id: VARCHAR(255)
    status: ENUM('pending', 'completed', 'failed', 'refunded')
    metadata: JSON
    created_at: TIMESTAMP
    completed_at: TIMESTAMP
}
```

### 크레딧 패키지
```sql
CreditPackage {
    package_id: UUID (PK)
    name: VARCHAR(100)
    credits: INT
    price: DECIMAL(10,2)
    bonus_credits: INT DEFAULT 0
    is_active: BOOLEAN DEFAULT true
    created_at: TIMESTAMP
}
```

### 사용량 로그
```sql
UsageLog {
    log_id: UUID (PK)
    user_id: UUID (FK → User Management Domain)
    service_type: VARCHAR(50)
    credits_used: INT
    metadata: JSON
    created_at: TIMESTAMP
}
```

### 청구서
```sql
Invoice {
    invoice_id: UUID (PK)
    user_id: UUID (FK → User Management Domain)
    subscription_id: UUID (FK → UserSubscription)
    amount: DECIMAL(10,2)
    tax: DECIMAL(10,2)
    total: DECIMAL(10,2)
    status: ENUM('draft', 'sent', 'paid', 'overdue')
    due_date: DATE
    paid_at: TIMESTAMP
    created_at: TIMESTAMP
}
```

## 🔵 External APIs (Payment & Billing Domain)

### Credit Management
```yaml
GET /api/credits/balance:
  Description: "크레딧 잔액 조회"
  Response: CreditBalanceResponse
  
POST /api/credits/purchase:
  Description: "크레딧 구매"
  Body: { package_id, payment_method }
  Response: PurchaseResponse
  
GET /api/credits/transactions:
  Description: "거래 내역 조회"
  Query: page, size, type?
  Response: TransactionListResponse
  
GET /api/credits/packages:
  Description: "크레딧 패키지 목록"
  Response: CreditPackageListResponse
```

### Subscription Management
```yaml
GET /api/subscriptions/plans:
  Description: "구독 플랜 목록"
  Response: SubscriptionPlanListResponse
  
POST /api/subscriptions/subscribe:
  Description: "구독 시작"
  Body: { plan_id, payment_method }
  Response: SubscriptionResponse
  
PUT /api/subscriptions/cancel:
  Description: "구독 취소"
  Response: SubscriptionCancelResponse
  
PUT /api/subscriptions/pause:
  Description: "구독 일시정지"
  Response: SubscriptionPauseResponse
  
PUT /api/subscriptions/resume:
  Description: "구독 재개"
  Response: SubscriptionResumeResponse
  
GET /api/subscriptions/status:
  Description: "구독 상태 조회"
  Response: SubscriptionStatusResponse
```

### Payment & Billing
```yaml
POST /api/payments/process:
  Description: "결제 처리"
  Body: { amount, payment_method, metadata }
  Response: PaymentResponse
  
GET /api/payments/history:
  Description: "결제 내역"
  Query: page, size, status?
  Response: PaymentHistoryResponse
  
POST /api/payments/refund:
  Description: "환불 요청"
  Body: { payment_id, reason }
  Response: RefundResponse
  
GET /api/invoices:
  Description: "청구서 목록"
  Query: page, size, status?
  Response: InvoiceListResponse
  
GET /api/invoices/{invoiceId}:
  Description: "청구서 상세"
  Response: InvoiceDetailResponse
```

### Usage Tracking
```yaml
GET /api/usage/summary:
  Description: "사용량 요약"
  Query: period
  Response: UsageSummaryResponse
  
GET /api/usage/details:
  Description: "상세 사용 내역"
  Query: start_date, end_date, service_type?
  Response: UsageDetailResponse
```

## 🔴 Internal APIs (Payment & Billing Domain)

```yaml
POST /api/internal/credits/validate:
  Description: "크레딧 잔액 확인"
  Body: { user_id, required_credits }
  Response: { sufficient: boolean, balance: number }
  
POST /api/internal/credits/deduct:
  Description: "크레딧 차감"
  Body: { user_id, amount, service_type, reference_id }
  Response: { success: boolean, balance_after: number }
  
POST /api/internal/credits/add:
  Description: "크레딧 추가"
  Body: { user_id, amount, type, description }
  
POST /api/internal/usage/log:
  Description: "사용량 기록"
  Body: { user_id, service_type, credits_used, metadata }
  
GET /api/internal/subscription/check:
  Description: "구독 상태 확인"
  Query: user_id
  Response: { active: boolean, plan_details: object }
  
POST /api/internal/billing/generate-invoice:
  Description: "청구서 생성"
  Body: { user_id, subscription_id, period }
```

---

## 🔗 외부 도메인 의존성

### 필요한 외부 API
```yaml
User Management Domain:
  - GET /api/users/{userId}: "사용자 정보 조회"
  - GET /api/internal/users/validate: "사용자 유효성 검증"
  
Trip Planning Domain:
  - GET /api/trips/{tripId}: "여행 정보 조회 (공유용)"
  - GET /api/internal/trips/validate: "여행 유효성 검증"
  
Review System Domain:
  - GET /api/reviews/{reviewId}: "리뷰 정보 조회 (공유용)"
  
Media Management Domain:
  - GET /api/media/{mediaId}: "미디어 정보 조회 (공유용)"
  
AI Client Domain:
  - GET /api/chat/usage: "AI 사용량 조회"
```

---

## 💡 핵심 비즈니스 로직

### Sharing Domain
1. **콘텐츠 공유 플로우**: 공유 생성 → 고유 링크 생성 → 접근 권한 설정 → 통계 추적
2. **소셜 피드 알고리즘**: 팔로우 관계 → 활동 수집 → 피드 구성 → 개인화 표시
3. **공유 만료 관리**: 만료 시간 추적 → 자동 정리 → 통계 보존

### Payment & Billing Domain
1. **크레딧 구매 플로우**: 패키지 선택 → 결제 처리 → 크레딧 적립 → 거래 기록
2. **구독 관리**: 플랜 선택 → 결제 설정 → 자동 갱신 → 청구서 발행
3. **사용량 추적**: 서비스 사용 → 크레딧 차감 → 로그 기록 → 통계 집계
4. **환불 처리**: 요청 검증 → 승인 프로세스 → 크레딧/금액 환불 → 기록 업데이트

---

## 🔐 보안 고려사항

- 공유 링크 암호화
- 접근 권한 검증
- 결제 정보 암호화 (PCI DSS 준수)
- 거래 무결성 보장
- Rate Limiting
- 이중 차감 방지 (Idempotency)
- 결제 게이트웨이 보안 연동