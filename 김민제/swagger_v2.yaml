# ========================================================================
# OpenAPI/Swagger 3.0 명세서 구조 설명
# ========================================================================
# 
# openapi: OpenAPI 명세서 버전 (3.0.3은 현재 가장 널리 사용되는 버전)
# info: API의 기본 정보 (제목, 설명, 버전, 연락처 등)
# servers: API가 호스팅되는 서버 목록 (개발, 스테이징, 프로덕션)
# tags: API 엔드포인트를 그룹화하는 라벨 (문서 정리용)
# paths: 실제 API 엔드포인트들의 정의
# components: 재사용 가능한 스키마, 응답, 파라미터 등의 정의
# security: 인증/인가 방식 정의
# 
# 각 엔드포인트 구조:
# - tags: 이 엔드포인트가 속한 그룹 (위에 정의한 tags 중 하나)
# - summary: 엔드포인트의 짧은 설명 (1줄)
# - description: 엔드포인트의 상세 설명 (여러 줄 가능)
# - operationId: 프로그래밍에서 사용할 고유 식별자 (중복 불가)
# - security: 이 엔드포인트에 필요한 인증 방식
# - parameters: URL 경로나 쿼리에 전달되는 파라미터
# - requestBody: POST/PUT/PATCH 등에서 바디로 전달되는 데이터
# - responses: 가능한 응답 코드와 각각의 응답 형식
# 
# x-로 시작하는 속성들: OpenAPI 확장 속성 (커스텀 메타데이터)
# - x-domain-dependencies: 도메인 간 의존성 관계
# - x-events-published: 발행하는 이벤트 목록
# - x-external-api: 외부 도메인이 제공하는 API 표시
# - x-provided-by: API를 제공하는 도메인 명시
# ========================================================================

openapi: 3.0.3
info:
  title: Compass Chat Domain API
  description: |
    # Chat 도메인 API 명세서
    
    ## 📋 도메인 구성 요약
    
    ### Chat 도메인이 제공하는 서비스
    - **채팅 스레드 관리**: 생성, 조회, 수정, 삭제
    - **메시지 처리**: 텍스트, 미디어, 위치 메시지
    - **AI 통합**: 응답 생성, 재생성
    - **여행 계획 연동**: Trip 도메인과 통합
    - **내부 API**: 다른 도메인을 위한 전용 API
    - **Webhook**: 비동기 처리 콜백
    
    ## 📊 도메인 간 상호작용
    
    | 도메인 | Chat → 외부 (요청) | 외부 → Chat (호출) | 주요 용도 |
    |--------|-------------------|-------------------|-----------|
    | **User** | • 사용자 정보 조회<br>• 토큰 검증 | - | 인증/인가 |
    | **Credit** | • 잔액 조회<br>• 크레딧 차감<br>• 사용 내역 | • 크레딧 차감 완료 웹훅 | 결제/과금 |
    | **Trip** | • 여행 계획 생성<br>• 계획 조회 | • 계획 생성 완료 웹훅<br>• 컨텍스트 조회 | 여행 계획 |
    | **Media** | • 파일 업로드<br>• 미디어 조회<br>• 삭제 | - | 파일 관리 |
    | **AI Service** | • 응답 생성<br>• 대화 요약 | - | AI 처리 |
    
    ## 🔄 주요 처리 흐름
    
    ### 메시지 전송
    1. User Domain에서 인증 확인
    2. Credit Domain에서 잔액 확인
    3. AI Service로 응답 생성
    4. Credit Domain에서 크레딧 차감
    5. 사용자에게 응답 반환
    
    ### 미디어 메시지
    1. Media Domain에 파일 업로드
    2. Credit Domain에서 크레딧 차감
    3. AI Service로 이미지 분석 (필요시)
    4. 사용자에게 응답 반환
    
    ### 여행 계획 생성
    1. Trip Domain에 계획 생성 요청
    2. Credit Domain에서 크레딧 차감
    3. Trip Domain이 완료 후 Webhook 호출
    4. 사용자에게 알림
    
    ## 📌 API 분류
    
    | 분류 | 설명 | 태그 |
    |-----|------|------|
    | **Chat Core** | 사용자가 직접 호출하는 핵심 API | Chat - Core |
    | **Chat Internal** | 다른 도메인이 호출하는 내부 API | Chat - Internal |
    | **Chat Webhooks** | 비동기 처리를 위한 콜백 API | Chat - Webhooks |
    | **External APIs** | Chat이 의존하는 외부 도메인 API | External - * |
  version: 2.0.0
  contact:
    name: Chat Domain Team
    email: chat-team@compass.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

# servers: API 서버 목록 - 클라이언트가 어느 서버로 요청을 보낼지 알려줍니다
# 개발/스테이징/프로덕션 환경별로 다른 URL을 정의할 수 있습니다
servers:
  - url: https://api.compass.com/v1
    description: Production server
  - url: https://staging-api.compass.com/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Development server

# tags: API를 논리적 그룹으로 분류하는 태그 정의
# - name: 태그의 고유 이름 (paths에서 이 이름을 참조)
# - description: 이 태그 그룹에 대한 설명
# 태그를 사용하면 Swagger UI에서 API가 그룹별로 정리되어 표시됩니다
tags:
  - name: Chat - Core
    description: Chat 도메인 핵심 기능 (사용자 대상)
  - name: Chat - Internal
    description: Chat 도메인 내부 API (다른 도메인 대상)
  - name: Chat - Webhooks
    description: Chat 도메인 Webhook 엔드포인트
  - name: External - User Domain
    description: User 도메인 의존성
  - name: External - Trip Domain
    description: Trip 도메인 의존성
  - name: External - Credit Domain
    description: Credit 도메인 의존성
  - name: External - Media Domain
    description: Media 도메인 의존성
  - name: External - AI Service
    description: AI Service 의존성

# x-domain-dependencies: 커스텀 확장 - 도메인 간 의존성 관계를 문서화
# provides: 이 도메인이 다른 도메인에게 제공하는 API/서비스
# consumes: 이 도메인이 의존하는 외부 도메인의 API/서비스
x-domain-dependencies:
  provides:
    - Chat Thread Management API
    - Message Query API
    - AI Context API
    - Trip Generation Events
  consumes:
    - User Domain (Authentication & User Info)
    - Trip Domain (Trip Planning)
    - Credit Domain (Credit Management)
    - Media Domain (Media Upload/Storage)
    - AI Service (Response Generation)

# x-events-published: 커스텀 확장 - 이 도메인이 발행하는 이벤트 목록
# 이벤트 기반 아키텍처에서 다른 도메인이 구독할 수 있는 이벤트를 정의
x-events-published:
  TripPlanGenerationRequested:
    description: 여행 계획 생성 요청 이벤트
    consumers: [Trip Domain]
    payload:
      eventId: uuid
      threadId: uuid
      userId: uuid
      preferences: object
      constraints: object
      timestamp: datetime
  ChatSessionEnded:
    description: 채팅 세션 종료 이벤트
    consumers: [Analytics Domain, Credit Domain]
    payload:
      eventId: uuid
      threadId: uuid
      userId: uuid
      totalMessages: integer
      totalTokensUsed: integer
      sessionDuration: integer
      timestamp: datetime
  MessageSent:
    description: 메시지 전송 이벤트
    consumers: [Analytics Domain]
    payload:
      messageId: uuid
      threadId: uuid
      userId: uuid
      senderType: string
      timestamp: datetime

# security: 전역 보안 설정 (여기서는 제거됨)
# 각 엔드포인트마다 필요한 보안 방식을 개별적으로 지정하는 것이 더 명확합니다
# - bearerAuth: JWT 토큰 인증 (사용자 API)
# - internalApiKey: 내부 API 키 인증 (도메인 간 통신)

# paths: 실제 API 엔드포인트 정의 섹션
# 각 경로는 HTTP 메소드(get, post, put, delete 등)와 함께 정의됩니다
paths:
  # ============================================
  # Chat 도메인이 제공하는 API (Core Features)
  # ============================================
  
  # 경로 정의 예시: /api/chat/threads
  /api/chat/threads:
    # HTTP 메소드: GET
    get:
      # tags: 이 엔드포인트가 속한 그룹 (위에서 정의한 태그 중 선택)
      tags:
        - Chat - Core
      # summary: API의 간단한 한 줄 설명 (Swagger UI 목록에 표시됨)
      summary: 채팅 스레드 목록 조회
      # security: 이 엔드포인트에 필요한 인증 방식
      # bearerAuth: JWT 토큰이 필요함을 의미
      security:
        - bearerAuth: []
      # description: API의 상세 설명 (여러 줄 가능, 마크다운 지원)
      description: |
        현재 인증된 사용자의 모든 채팅 스레드를 조회합니다.
        - REQ-CHAT-002: 채팅 스레드 목록 조회
        - REQ-CHAT-013: 이전 채팅 히스토리 조회
      # operationId: 프로그래밍에서 사용할 고유 식별자 (중복 불가)
      # 클라이언트 코드 생성 도구에서 이 이름으로 함수를 생성합니다
      operationId: getChatThreads
      # parameters: URL 경로, 쿼리 스트링, 헤더에 전달되는 파라미터
      parameters:
        # 파라미터 예시
        - name: page          # 파라미터 이름
          in: query           # 파라미터 위치 (query, path, header, cookie)
          schema:             # 파라미터의 데이터 타입 정의
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort
          in: query
          schema:
            type: string
            default: lastMessageAt,desc
        - name: status
          in: query
          schema:
            type: string
            enum: [active, archived, deleted]  # 가능한 값들의 목록
      # responses: 가능한 HTTP 응답 코드와 각각의 응답 형식
      responses:
        '200':  # HTTP 200 OK - 성공적인 응답
          description: 채팅 목록 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatThreadListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    # 같은 경로에 다른 HTTP 메소드: POST
    post:
      tags:
        - Chat - Core
      summary: 새 채팅 스레드 생성
      security:
        - bearerAuth: []
      description: |
        새로운 채팅 스레드를 생성합니다.
        - REQ-CHAT-003: 새로운 채팅 스레드 생성
        - REQ-CHAT-014: 새 채팅 시작
        
        외부 의존성:
        - User Domain: 사용자 검증
      operationId: createChatThread
      # requestBody: POST/PUT/PATCH에서 바디로 전달되는 데이터
      requestBody:
        required: true        # 필수 여부
        content:             # 컨텐츠 타입별 스키마 정의
          application/json:   # Content-Type: application/json
            schema:
              # $ref: 다른 곳에 정의된 스키마를 참조 (components/schemas 섹션)
              $ref: '#/components/schemas/CreateChatThreadRequest'
      responses:
        '201':  # HTTP 201 Created - 리소스 생성 성공
          description: 채팅 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatThreadResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'

  # 경로 파라미터 예시: {threadId}는 동적 값
  /api/chat/threads/{threadId}:
    get:
      tags:
        - Chat - Core
      summary: 특정 채팅 스레드 조회
      security:
        - bearerAuth: []
      description: 특정 채팅 스레드의 상세 정보를 조회합니다.
      operationId: getChatThread
      parameters:
        # $ref: 공통 파라미터를 참조 (components/parameters 섹션)
        - $ref: '#/components/parameters/threadId'
      responses:
        '200':
          description: 채팅 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatThreadDetailResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Chat - Core
      summary: 채팅 제목 수정
      security:
        - bearerAuth: []
      description: |
        채팅 스레드의 제목을 수정합니다.
        - REQ-CHAT-017: 채팅 제목 수정
      operationId: updateChatThread
      parameters:
        - $ref: '#/components/parameters/threadId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChatThreadRequest'
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatThreadResponse'

    delete:
      tags:
        - Chat - Core
      summary: 채팅 스레드 삭제
      security:
        - bearerAuth: []
      description: |
        채팅 스레드를 삭제합니다.
        - REQ-CHAT-016: 채팅 스레드 삭제
        
        외부 의존성:
        - Media Domain: 관련 이미지 삭제
      operationId: deleteChatThread
      parameters:
        - $ref: '#/components/parameters/threadId'
      responses:
        '204':
          description: 삭제 성공

  /api/chat/threads/{threadId}/messages:
    get:
      tags:
        - Chat - Core
      summary: 메시지 목록 조회
      security:
        - bearerAuth: []
      description: 채팅 스레드의 메시지를 조회합니다.
      operationId: getMessages
      parameters:
        - $ref: '#/components/parameters/threadId'
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 50
            maximum: 200
        - name: lastMessageId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 메시지 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageListResponse'

    post:
      tags:
        - Chat - Core
      summary: 메시지 전송
      security:
        - bearerAuth: []
      description: |
        채팅 스레드에 메시지를 전송합니다.
        - REQ-CHAT-004: 채팅 메시지 송수신
        
        외부 의존성:
        - Credit Domain: 크레딧 차감
        - AI Service: AI 응답 생성
      operationId: sendMessage
      parameters:
        - $ref: '#/components/parameters/threadId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
      responses:
        '201':
          description: 메시지 전송 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '402':
          description: 크레딧 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/chat/threads/{threadId}/messages/with-media:
    post:
      tags:
        - Chat - Core
      summary: 미디어 첨부 메시지 전송
      security:
        - bearerAuth: []
      description: |
        이미지나 파일을 첨부하여 메시지를 전송합니다.
        - REQ-CHAT-010: 채팅에 이미지 첨부
        
        **처리 흐름:**
        1. Chat이 미디어 파일 수신
        2. Media 도메인 `/api/media/upload` 호출하여 파일 저장
        3. Media 도메인에서 mediaId와 URL 반환
        4. Message 엔티티에 mediaUrl 저장
        5. Credit 도메인 호출하여 크레딧 차감
        6. AI Service 호출 (이미지 분석이 필요한 경우)
        
        **외부 API 호출:**
        - Media 도메인: POST /api/media/upload
        - Credit 도메인: POST /api/credits/deduct
        - AI Service: POST /api/ai/generate-response (이미지 분석 시)
      operationId: sendMessageWithMedia
      parameters:
        - $ref: '#/components/parameters/threadId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - message
              properties:
                file:
                  type: string
                  format: binary
                  description: 업로드할 이미지/파일 (최대 10MB)
                message:
                  type: string
                  description: 메시지 내용
                metadata:
                  type: object
                  description: 추가 메타데이터 (JSON 문자열)
                  properties:
                    fileType:
                      type: string
                      enum: [image, document, video]
                    description:
                      type: string
      responses:
        '201':
          description: 미디어 메시지 전송 성공
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/MessageResponse'
                  - type: object
                    properties:
                      mediaInfo:
                        type: object
                        description: Media 도메인에서 반환된 정보
                        properties:
                          mediaId:
                            type: string
                            format: uuid
                          url:
                            type: string
                            description: 미디어 파일 URL
                          thumbnailUrl:
                            type: string
                            description: 썸네일 URL (이미지인 경우)
                          size:
                            type: integer
                            description: 파일 크기 (bytes)
                          mimeType:
                            type: string
                            description: MIME 타입
        '413':
          description: 파일 크기 초과 (Media 도메인 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '415':
          description: 지원하지 않는 파일 형식 (Media 도메인 에러)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '507':
          description: Media 도메인 저장 공간 부족
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/chat/threads/{threadId}/messages/with-location:
    post:
      tags:
        - Chat - Core
      summary: 위치 공유 메시지 전송
      security:
        - bearerAuth: []
      description: |
        현재 위치를 공유하는 메시지를 전송합니다.
        - REQ-CHAT-011: 현재 위치 공유
      operationId: sendMessageWithLocation
      parameters:
        - $ref: '#/components/parameters/threadId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageWithLocationRequest'
      responses:
        '201':
          description: 위치 메시지 전송 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/chat/threads/{threadId}/generate-trip:
    post:
      tags:
        - Chat - Core
      summary: 여행 계획 생성 요청
      security:
        - bearerAuth: []
      description: |
        AI 대화를 기반으로 여행 계획을 생성합니다.
        - REQ-CHAT-001: AI 대화 기반 여행 계획
        - REQ-CHAT-005: AI 채팅에서 여행 계획 생성
        
        외부 의존성:
        - Trip Domain: 여행 계획 생성
        - Credit Domain: 크레딧 차감
      operationId: generateTripPlan
      parameters:
        - $ref: '#/components/parameters/threadId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateTripPlanRequest'
      responses:
        '202':
          description: 여행 계획 생성 요청 접수
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [processing]
                  message:
                    type: string

  # ============================================
  # Chat 도메인이 제공하는 API (Internal APIs)
  # ============================================

  /api/chat/internal/threads/{threadId}/trip-association:
    get:
      tags:
        - Chat - Internal
      summary: 채팅-여행 연결 정보 조회
      description: |
        채팅 스레드와 연결된 여행 계획 정보를 제공합니다.
        Consumer: Trip Domain
      operationId: getTripAssociation
      security:
        - internalApiKey: []
      parameters:
        - $ref: '#/components/parameters/threadId'
      responses:
        '200':
          description: 연결 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  threadId:
                    type: string
                    format: uuid
                  tripIds:
                    type: array
                    items:
                      type: string
                      format: uuid
                  generatedAt:
                    type: string
                    format: date-time

  /api/chat/internal/threads/{threadId}/context:
    get:
      tags:
        - Chat - Internal
      summary: AI 대화 컨텍스트 제공
      description: |
        AI 대화의 컨텍스트 정보를 제공합니다.
        Consumer: Trip Domain
      operationId: getChatContext
      security:
        - internalApiKey: []
      parameters:
        - $ref: '#/components/parameters/threadId'
      responses:
        '200':
          description: 컨텍스트 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatContextResponse'

  /api/chat/internal/threads/by-user/{userId}:
    get:
      tags:
        - Chat - Internal
      summary: 사용자별 채팅 스레드 조회
      description: |
        특정 사용자의 모든 채팅 스레드를 조회합니다.
        Consumer: Trip Domain, Admin Domain
      operationId: getChatThreadsByUser
      security:
        - internalApiKey: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatThreadListResponse'

  # ============================================
  # Chat 도메인 Webhook Endpoints
  # ============================================

  /api/chat/webhooks/trip-plan-completed:
    post:
      tags:
        - Chat - Webhooks
      summary: 여행 계획 생성 완료 콜백
      description: |
        Trip 도메인에서 여행 계획 생성이 완료되면 호출됩니다.
        Provider: Trip Domain (호출하는 쪽)
        Consumer: Chat Domain (받는 쪽)
      operationId: tripPlanCompletedWebhook
      security:
        - internalApiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - threadId
                - tripId
                - status
              properties:
                threadId:
                  type: string
                  format: uuid
                tripId:
                  type: string
                  format: uuid
                status:
                  type: string
                  enum: [success, failed]
                message:
                  type: string
                errorCode:
                  type: string
      responses:
        '200':
          description: 웹훅 처리 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean

  # ============================================
  # 외부 도메인 API 명세 (Chat이 호출하는 API)
  # 주의: 이 API들은 다른 도메인이 제공해야 하는 API입니다
  # Chat 도메인은 이 API들을 호출하는 클라이언트입니다
  # ============================================

  # User Domain APIs
  /api/users/{userId}:
    get:
      tags:
        - External - User Domain
      summary: '[User Domain] 사용자 정보 조회'
      description: |
        Chat 도메인이 사용자 정보를 조회할 때 사용합니다.
        Provider: User Domain
        Purpose: 채팅 스레드 생성 시 사용자 검증
      operationId: getUserInfoExternal
      x-external-api: true
      x-provided-by: User Domain
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        '404':
          description: 사용자를 찾을 수 없음

  /api/users/verify-token:
    post:
      tags:
        - External - User Domain
      summary: '[User Domain] 토큰 검증'
      description: |
        JWT 토큰을 검증하고 사용자 정보를 반환합니다.
        Provider: User Domain
        Purpose: 모든 API 호출 시 인증
      operationId: verifyUserTokenExternal
      x-external-api: true
      x-provided-by: User Domain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        '200':
          description: 토큰 검증 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  userId:
                    type: string
                    format: uuid
                  permissions:
                    type: array
                    items:
                      type: string

  # Trip Domain APIs
  /api/trips/create-from-chat:
    post:
      tags:
        - External - Trip Domain
      summary: '[Trip Domain] 채팅 기반 여행 계획 생성'
      description: |
        채팅 대화를 기반으로 여행 계획을 생성합니다.
        Provider: Trip Domain
        Purpose: AI 대화 완료 후 여행 계획 생성
      operationId: createTripFromChatExternal
      x-external-api: true
      x-provided-by: Trip Domain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTripFromChatRequest'
      responses:
        '201':
          description: 여행 계획 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  tripId:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [created, processing, failed]
                  message:
                    type: string

  /api/trips/{tripId}:
    get:
      tags:
        - External - Trip Domain
      summary: '[Trip Domain] 여행 계획 조회'
      description: |
        생성된 여행 계획을 조회합니다.
        Provider: Trip Domain
        Purpose: 채팅에서 생성된 여행 계획 표시
      operationId: getTripPlanExternal
      x-external-api: true
      x-provided-by: Trip Domain
      parameters:
        - name: tripId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 여행 계획 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripPlanResponse'

  # Credit Domain APIs
  /api/credits/users/{userId}/balance:
    get:
      tags:
        - External - Credit Domain
      summary: '[Credit Domain] 크레딧 잔액 조회'
      description: |
        사용자의 크레딧 잔액을 조회합니다.
        Provider: Credit Domain
        Purpose: 메시지 전송 전 잔액 확인
      operationId: getCreditBalanceExternal
      x-external-api: true
      x-provided-by: Credit Domain
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 잔액 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    format: uuid
                  balance:
                    type: number
                    format: decimal
                  currency:
                    type: string
                  lastUpdated:
                    type: string
                    format: date-time

  /api/credits/deduct:
    post:
      tags:
        - External - Credit Domain
      summary: '[Credit Domain] 크레딧 차감'
      description: |
        AI 응답 생성 후 크레딧을 차감합니다.
        Provider: Credit Domain
        Purpose: 메시지 전송 시 크레딧 소비
      operationId: requestCreditDeduction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - amount
                - reason
                - referenceId
                - referenceType
              properties:
                userId:
                  type: string
                  format: uuid
                amount:
                  type: number
                  format: decimal
                reason:
                  type: string
                referenceId:
                  type: string
                  format: uuid
                referenceType:
                  type: string
                  enum: [chat_message, trip_generation]
      responses:
        '200':
          description: 크레딧 차감 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    type: string
                    format: uuid
                  remainingBalance:
                    type: number
                    format: decimal
                  status:
                    type: string
                    enum: [success, insufficient_funds]

  # Media Domain APIs (이전 Image Domain)
  /api/media/upload:
    post:
      tags:
        - External - Media Domain
      summary: '[Media Domain] 미디어 업로드'
      description: |
        이미지나 파일을 업로드합니다.
        Provider: Media Domain
        Purpose: 채팅 메시지 미디어 첨부
      operationId: uploadMediaExternal
      x-external-api: true
      x-provided-by: Media Domain
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: object
                  description: 선택적 메타데이터
                  properties:
                    userId:
                      type: string
                      format: uuid
                    context:
                      type: string
                      enum: [chat_message, profile]
                    mimeType:
                      type: string
      responses:
        '201':
          description: 업로드 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  mediaId:
                    type: string
                    format: uuid
                  url:
                    type: string
                  thumbnailUrl:
                    type: string
                  size:
                    type: integer
                  mimeType:
                    type: string

  /api/media/{mediaId}:
    get:
      tags:
        - External - Media Domain
      summary: '[Media Domain] 미디어 조회'
      description: |
        저장된 미디어를 조회합니다.
        Provider: Media Domain
        Purpose: 채팅 메시지의 미디어 표시
      operationId: getMediaExternal
      x-external-api: true
      x-provided-by: Media Domain
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 미디어 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  mediaId:
                    type: string
                    format: uuid
                  url:
                    type: string
                  metadata:
                    type: object
                  createdAt:
                    type: string
                    format: date-time

    delete:
      tags:
        - External - Media Domain
      summary: '[Media Domain] 미디어 삭제'
      description: |
        미디어를 삭제합니다.
        Provider: Media Domain
        Purpose: 채팅 삭제 시 관련 미디어 정리
      operationId: deleteMediaExternal
      x-external-api: true
      x-provided-by: Media Domain
      parameters:
        - name: mediaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: 삭제 성공

  # AI Service APIs
  /api/ai/generate-response:
    post:
      tags:
        - External - AI Service
      summary: '[AI Service] AI 응답 생성'
      description: |
        사용자 메시지에 대한 AI 응답을 생성합니다.
        Provider: AI Service (OpenAI/Claude)
        Purpose: 채팅 메시지 AI 응답
      operationId: generateAIResponseExternal
      x-external-api: true
      x-provided-by: AI Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - messages
                - model
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        enum: [system, user, assistant]
                      content:
                        type: string
                model:
                  type: string
                temperature:
                  type: number
                  format: float
                maxTokens:
                  type: integer
      responses:
        '200':
          description: AI 응답 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                  tokensUsed:
                    type: integer
                  finishReason:
                    type: string

# components: 재사용 가능한 컴포넌트 정의 섹션
# 여러 엔드포인트에서 공통으로 사용하는 스키마, 파라미터, 응답 등을 정의합니다
components:
  # securitySchemes: 보안/인증 방식 정의
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 사용자 인증용 JWT 토큰
    internalApiKey:
      type: apiKey
      in: header
      name: X-Internal-API-Key
      description: 도메인 간 내부 통신용 API Key

  # parameters: 공통으로 사용되는 파라미터 정의
  parameters:
    # 경로 파라미터 예시
    threadId:
      name: threadId          # 파라미터 이름
      in: path               # URL 경로에 포함
      required: true         # 필수 파라미터
      schema:
        type: string
        format: uuid         # UUID 형식

  # schemas: 데이터 모델/스키마 정의
  # Request/Response DTO(Data Transfer Object) 정의
  schemas:
    # Request Schemas - 요청 시 전달되는 데이터 구조
    CreateChatThreadRequest:
      type: object           # 객체 타입
      properties:            # 객체의 속성들
        title:
          type: string
          maxLength: 255
        modeId:
          type: integer
        initialMessage:
          type: string
      required:
        - modeId

    UpdateChatThreadRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
      required:
        - title

    SendMessageRequest:
      type: object
      properties:
        content:
          type: string
          minLength: 1
        parentMessageId:
          type: string
          format: uuid
          description: AI 응답 재생성 시 부모 메시지 ID
      required:
        - content

    MessageWithLocationRequest:
      type: object
      properties:
        content:
          type: string
        location:
          type: object
          properties:
            lat:
              type: number
              format: double
            lng:
              type: number
              format: double
            address:
              type: string
          required:
            - lat
            - lng
      required:
        - content
        - location

    GenerateTripPlanRequest:
      type: object
      properties:
        preferences:
          type: object
          properties:
            budget:
              type: number
              format: decimal
            duration:
              type: integer
            travelStyle:
              type: string
            interests:
              type: array
              items:
                type: string
        constraints:
          type: object
          properties:
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
            startLocation:
              type: string

    CreateTripFromChatRequest:
      type: object
      required:
        - threadId
        - userId
        - planData
      properties:
        threadId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        planData:
          type: object
          properties:
            title:
              type: string
            description:
              type: string
            itinerary:
              type: array
              items:
                type: object
            preferences:
              type: object

    # Response Schemas - 응답으로 반환되는 데이터 구조
    ChatThreadResponse:
      type: object
      properties:
        threadId:
          type: string
          format: uuid
        title:
          type: string
        mode:
          type: object
          properties:
            modeId:
              type: integer
            name:
              type: string
        status:
          type: string
          enum: [active, archived, deleted]
        lastMessageAt:
          type: string
          format: date-time
        messageCount:
          type: integer
        createdAt:
          type: string
          format: date-time

    ChatThreadListResponse:
      type: object
      properties:
        threads:
          type: array
          items:
            $ref: '#/components/schemas/ChatThreadResponse'
        pagination:
          $ref: '#/components/schemas/PaginationDto'

    ChatThreadDetailResponse:
      allOf:
        - $ref: '#/components/schemas/ChatThreadResponse'
        - type: object
          properties:
            userId:
              type: string
              format: uuid
            updatedAt:
              type: string
              format: date-time

    MessageResponse:
      type: object
      properties:
        messageId:
          type: string
          format: uuid
        threadId:
          type: string
          format: uuid
        senderType:
          type: string
          enum: [user, ai]
        content:
          type: string
        mediaUrl:
          type: string
        location:
          type: object
          properties:
            lat:
              type: number
            lng:
              type: number
        tokensUsed:
          type: integer
        parentMessageId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    MessageListResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageResponse'
        hasMore:
          type: boolean
        nextCursor:
          type: string

    ChatContextResponse:
      type: object
      properties:
        preferences:
          type: object
          properties:
            budget:
              type: number
            duration:
              type: integer
            interests:
              type: array
              items:
                type: string
        constraints:
          type: object
          properties:
            startDate:
              type: string
              format: date
            endDate:
              type: string
              format: date
            location:
              type: string
        conversationSummary:
          type: string

    UserInfoResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        profileImage:
          type: string
        preferences:
          type: object
        status:
          type: string
          enum: [active, suspended]

    TripPlanResponse:
      type: object
      properties:
        tripId:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        itinerary:
          type: array
          items:
            type: object
        status:
          type: string
        createdAt:
          type: string
          format: date-time

    PaginationDto:
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
        timestamp:
          type: string
          format: date-time

  # responses: 공통 응답 정의 (여러 엔드포인트에서 재사용)
  responses:
    BadRequestError:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: CHAT_006
            message: 잘못된 채팅 모드입니다
            timestamp: "2024-01-25T10:00:00Z"

    UnauthorizedError:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: AUTH_001
            message: 인증이 필요합니다
            timestamp: "2024-01-25T10:00:00Z"

    NotFoundError:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: CHAT_001
            message: 채팅 스레드를 찾을 수 없습니다
            timestamp: "2024-01-25T10:00:00Z"

