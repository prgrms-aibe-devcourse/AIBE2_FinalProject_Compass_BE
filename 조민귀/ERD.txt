//// ------------------------------------------------------
//// --- AUTOGENERATED BY GEMINI AI
//// --- DB SCHEMA FOR TRAVEL REVIEW SERVICE (FINAL VER. + ENHANCEMENTS)
//// --- BASED ON DETAILED KOREAN REQUIREMENTS
//// ------------------------------------------------------

// ---------------- ENUMS (상태 값 정의) ----------------

Enum review_status {
  PENDING // 검토 대기 (스팸 필터링 포함)
  APPROVED // 게시 승인
  HIDDEN // 관리자/자동 숨김
  DELETED // 삭제됨
}

Enum report_status {
  PENDING // 신고 접수
  REVIEWED // 관리자 검토 중
  RESOLVED // 처리 완료
}

Enum report_type {
  SPAM // 스팸/광고
  ABUSE // 욕설/비방
  FALSE_INFO // 허위 정보
  NSFW // 음란물/선정적
  OTHER // 기타
}

Enum media_status {
  UPLOADING
  PROCESSING
  AVAILABLE
  HIDDEN
  ERROR
}

Enum notification_type {
  NEW_COMMENT
  MENTION
  HELPFUL_VOTE
  REPORT_RESOLVED
  BADGE_AWARDED
}

Enum user_status {
  ACTIVE // 정상 활동
  SUSPENDED // 일시 정지
  BANNED // 영구 정지
  DORMANT // 휴면 계정
}


// ---------------- CORE TABLES (핵심 기능) ----------------

Table Users {
  user_id int [pk, increment]
  username varchar(50) [unique, not null]
  email varchar(255) [unique, not null]
  password_hash varchar(255) [not null]
  profile_image_url varchar(2048)
  total_points int [not null, default: 0, note: 'REQ-BADGE-001, 002. 음수 허용(-100까지)']
  level int [not null, default: 1, note: 'REQ-BADGE-004. 누적 포인트 기반']
  trust_score decimal(10, 2) [not null, default: 0, note: 'REQ-BADGE-003. 작성자 신뢰도 점수']
  storage_used_bytes bigint [not null, default: 0, note: 'REQ-NFR-MEDIA-004. 미디어 저장소 사용량']
  status user_status [not null, default: 'ACTIVE', note: '[개선] 사용자 제재 및 상태 관리 구체화']
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Table Plans {
  plan_id int [pk, increment]
  user_id int [not null, ref: > Users.user_id]
  title varchar(255) [not null]
  // ... other plan details
  created_at timestamp [not null, default: `now()`]
}

Table Reviews {
  review_id int [pk, increment]
  user_id int [not null, ref: > Users.user_id]
  plan_id int [not null, ref: > Plans.plan_id]
  title varchar(255)
  body text [not null]
  rating decimal(2,1) [not null, note: '1.0 ~ 5.0']
  status review_status [not null, default: 'PENDING', note: 'REQ-MOD-001']
  spam_score int [note: '[개선] REQ-MOD-003. 스팸 필터 점수 기록. 튜닝 및 분석용']
  helpful_count int [not null, default: 0, note: 'REQ-REVIEW-005. 단순 도움됨 카운트']
  weighted_helpful_score decimal(10, 2) [not null, default: 0, note: 'REQ-REVIEW-004. 가중치가 적용된 도움됨 점수']
  created_at timestamp [not null, default: `now()`, note: 'REQ-REVIEW-001. 수정 가능 시간의 기준']
  updated_at timestamp [not null, default: `now()`]
}

Table Tags {
  tag_id int [pk, increment]
  name varchar(50) [unique, not null]
}

Table Review_Tags {
  review_id int [pk, ref: > Reviews.review_id]
  tag_id int [pk, ref: > Tags.tag_id]
}

Table Review_Helpfulness {
  user_id int [pk, ref: > Users.user_id, note: '도움됨을 누른 사람']
  review_id int [pk, ref: > Reviews.review_id]
  created_at timestamp [not null, default: `now()`]
}

Table Best_Reviews {
  best_review_id int [pk, increment]
  review_id int [unique, not null, ref: > Reviews.review_id]
  type varchar(10) [not null, note: '"weekly" or "monthly"']
  selection_score decimal(10, 2) [not null, note: 'REQ-REVIEW-004. 선정 당시의 베스트 후기 점수']
  is_manually_pinned boolean [not null, default: false]
  selected_at timestamp [not null, default: `now()`]
  note: 'REQ-REVIEW-004. 베스트 후기 선정 이력 보존'
}

Table Comments {
  comment_id int [pk, increment]
  review_id int [not null, ref: > Reviews.review_id]
  user_id int [not null, ref: > Users.user_id]
  parent_comment_id int [ref: > Comments.comment_id, note: 'REQ-CMT-002. 대댓글']
  body text [not null]
  is_deleted boolean [not null, default: false, note: 'REQ-CMT-001. Soft delete 처리']
  status review_status [not null, default: 'APPROVED', note: '[개선] 댓글 모더레이션 상태 관리']
  spam_score int [note: '[개선] REQ-MOD-003. 스팸 필터 점수 기록']
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

// ---------------- MEDIA TABLES (미디어) ----------------

Table Media {
  media_id int [pk, increment]
  uploader_id int [not null, ref: > Users.user_id]
  review_id int [ref: > Reviews.review_id]
  storage_path varchar(2048) [not null, note: 'REQ-MEDIA-003. S3/GCS 경로']
  original_filename varchar(255) [not null]
  mime_type varchar(100) [not null]
  file_size_bytes int [not null, note: 'REQ-MEDIA-002. 파일 용량']
  status media_status [not null, default: 'UPLOADING']
  nsfw_score float [note: 'REQ-MEDIA-006, 007. AI 분석 NSFW 점수']
  created_at timestamp [not null, default: `now()`]
}

Table Media_Tags {
  media_tag_id int [pk, increment]
  media_id int [not null, ref: > Media.media_id]
  tag_name varchar(100) [not null]
  confidence_score float [not null, note: 'REQ-MEDIA-006. 태그 신뢰도']
  source varchar(50) [not null, default: 'auto_vision']
}

// ---------------- MODERATION TABLES (모더레이션) ----------------

Table Reports {
  report_id int [pk, increment]
  reporter_id int [not null, ref: > Users.user_id]
  target_id int [not null, note: '신고 대상 콘텐츠의 ID']
  target_type varchar(50) [not null, note: '"review", "comment", "user"']
  report_type report_type [not null, note: 'REQ-MOD-002']
  description text
  status report_status [not null, default: 'PENDING']
  created_at timestamp [not null, default: `now()`]
  resolved_at timestamp
  resolved_by_admin_id int [ref: > Users.user_id, note: '[개선] 신고를 처리한 관리자 ID 기록']
  note: 'REQ-REVIEW-004, REQ-BADGE-003. status가 RESOLVED인 경우 "유효 신고"로 판단'
}

Table Admin_Action_Logs {
  log_id int [pk, increment]
  admin_id int [not null, ref: > Users.user_id]
  target_id int [not null]
  target_type varchar(50) [not null]
  action varchar(50) [not null, note: '"HIDE", "DELETE", "APPROVE", "WARN_USER"']
  reason text [not null, note: 'REQ-MOD-001']
  created_at timestamp [not null, default: `now()`]
}

// ---------------- BADGE & POINT TABLES (포인트/뱃지) ----------------

Table Point_History {
  history_id int [pk, increment]
  user_id int [not null, ref: > Users.user_id]
  points_changed int [not null, note: 'REQ-BADGE-001, 002. 획득은 양수, 차감은 음수']
  reason varchar(100) [not null, note: '"CREATE_REVIEW", "SPAM_PENALTY" 등']
  related_entity_id int [note: '관련 ID (e.g., review_id)']
  created_at timestamp [not null, default: `now()`]
}

Table Badges {
  badge_id int [pk, increment]
  name varchar(100) [not null]
  description text
  icon_url varchar(2048)
  criteria text [note: 'REQ-BADGE-003. 뱃지 획득 조건']
}

Table User_Badges {
  user_id int [pk, ref: > Users.user_id]
  badge_id int [pk, ref: > Badges.badge_id]
  awarded_at timestamp [not null, default: `now()`]
}

// ---------------- ETC TABLES (기타) ----------------

Table Notifications {
  notification_id int [pk, increment]
  user_id int [not null, ref: > Users.user_id, note: '알림 수신자']
  type notification_type [not null, note: 'REQ-CMT-004']
  actor_id int [ref: > Users.user_id, note: '알림을 유발한 행위자']
  entity_id int [note: '알림 관련 대상 ID (e.g., comment_id)']
  entity_type varchar(50)
  is_read boolean [not null, default: false]
  created_at timestamp [not null, default: `now()`]
}