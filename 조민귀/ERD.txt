// ==========================================
// 성능 모니터링 테이블 (REQ-NFR)
// ==========================================

// API 성능 모니터링 (REQ-NFR-PERF-001)
Table api_performance_metrics {
  id bigint [pk, increment]
  endpoint varchar(255) [not null]
  method varchar(10) [not null]
  response_time_ms int [not null]
  status_code int [not null]
  concurrent_users int
  timestamp timestamp [default: `now()`]
  
  indexes {
    endpoint
    timestamp
  }
  
  note: '피드 리스트 API P95 ≤ 1s 모니터링'
}

// 시스템 가용성 모니터링 (REQ-NFR-AVAIL-001)
Table system_availability {
  id bigint [pk, increment]
  service_name varchar(100) [not null]
  status enum('UP', 'DOWN', 'DEGRADED') [not null]
  uptime_seconds bigint
  downtime_seconds bigint
  availability_percentage decimal(5,2)
  deployment_type varchar(50) [note: 'Blue-Green, Rolling 등']
  checked_at timestamp [default: `now()`]
  
  indexes {
    service_name
    checked_at
  }
}

// 오류 로그 집계 (REQ-NFR-LOG-001)
Table error_logs {
  id bigint [pk, increment]
  severity enum('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL') [not null]
  service varchar(100) [not null]
  message text [not null]
  stack_trace text
  user_id bigint [ref: > users.id]
  request_id varchar(100)
  slack_notified boolean [default: false]
  created_at timestamp [default: `now()`]
  
  indexes {
    severity
    service
    created_at
  }
  
  note: 'ERROR 이상은 Slack #media-alerts 채널 알림'
}// 여행 매칭 서비스 데이터베이스 스키마
// dbdiagram.io용 DBML(Database Markup Language)

// ==========================================
// 사용자 관련 테이블
// ==========================================

Table users {
  id bigint [pk, increment]
  email varchar(255) [unique, not null]
  password varchar(255) [not null]
  nickname varchar(100) [unique, not null]
  profile_image_url varchar(500)
  bio text
  total_rating decimal(3,1) [default: 0.0, note: '평균 평점 (1.0~5.0)']
  rating_count int [default: 0]
  weighted_rating decimal(3,1) [default: 0.0, note: '가중평균 평점']
  point_total int [default: 0, note: '총 포인트']
  level int [default: 1]
  storage_used bigint [default: 0, note: 'bytes 단위']
  storage_limit bigint [default: 5368709120, note: '5GB 기본']
  status enum('ACTIVE', 'BLOCKED', 'DELETED') [default: 'ACTIVE']
  block_reason text
  trust_score decimal(3,2) [default: 1.0, note: '신뢰도 점수 (0.0~1.0)']
  created_at timestamp [default: `now()`]
  updated_at timestamp
  deleted_at timestamp
  
  indexes {
    email
    nickname
    status
  }
}

// 사용자 관리 테이블 (REQ-ADMIN-001)
Table managed_users {
  id bigint [pk, increment]
  user_id bigint [not null, ref: > users.id]
  action enum('BLOCK', 'UNBLOCK', 'WARNING') [not null]
  reason text [not null]
  admin_id bigint [not null, ref: > admin_users.id]
  created_at timestamp [default: `now()`]
  expires_at timestamp [note: '차단 만료 시간']
  
  indexes {
    user_id
    action
    created_at
  }
}

Table admin_users {
  id bigint [pk, increment]
  username varchar(100) [unique, not null]
  password varchar(255) [not null]
  email varchar(255) [unique, not null]
  role enum('SUPER_ADMIN', 'ADMIN', 'MODERATOR') [default: 'ADMIN']
  created_at timestamp [default: `now()`]
  last_login_at timestamp
}

// ==========================================
// 여행 피드 관련 테이블
// ==========================================

Table feeds {
  id bigint [pk, increment]
  user_id bigint [not null, ref: > users.id]
  title varchar(255) [not null]
  content text [not null]
  view_count int [default: 0]
  like_count int [default: 0]
  comment_count int [default: 0]
  status enum('PUBLISHED', 'HIDDEN', 'DELETED', 'DELETED_BY_ADMIN') [default: 'PUBLISHED']
  created_at timestamp [default: `now()`]
  updated_at timestamp
  deleted_at timestamp
  
  indexes {
    user_id
    status
    created_at
  }
}

Table feed_media {
  id bigint [pk, increment]
  feed_id bigint [not null, ref: > feeds.id]
  media_id bigint [not null, ref: > media_files.id]
  order_index int [not null]
  created_at timestamp [default: `now()`]
  
  indexes {
    (feed_id, order_index) [unique]
  }
}

// ==========================================
// 리뷰 관련 테이블
// ==========================================

Table reviews {
  id bigint [pk, increment]
  reviewer_id bigint [not null, ref: > users.id]
  reviewee_id bigint [ref: > users.id, note: '리뷰 대상 사용자']
  matching_id bigint [ref: > matchings.id, note: '관련 매칭']
  plan_id bigint [note: '관련 플랜']
  title varchar(255)
  content text [not null]
  rating int [not null, note: '1~5 별점']
  helpful_count int [default: 0]
  is_best_weekly boolean [default: false]
  is_best_monthly boolean [default: false]
  status enum('PENDING', 'APPROVED', 'HIDDEN', 'DELETED') [default: 'PENDING']
  edited_count int [default: 0, note: '24시간 내 1회만 수정 가능']
  last_edited_at timestamp
  created_at timestamp [default: `now()`]
  updated_at timestamp
  deleted_at timestamp
  deleted_reason text
  
  indexes {
    reviewer_id
    reviewee_id
    matching_id
    status
    created_at
    rating
  }
}

Table review_tags {
  id bigint [pk, increment]
  review_id bigint [not null, ref: > reviews.id]
  tag varchar(50) [not null]
  created_at timestamp [default: `now()`]
  
  indexes {
    review_id
    tag
  }
  
  note: '리뷰당 최대 5개 태그 제한 (애플리케이션 레벨에서 체크)'
}

Table review_reactions {
  id bigint [pk, increment]
  review_id bigint [not null, ref: > reviews.id]
  user_id bigint [not null, ref: > users.id]
  type enum('HELPFUL', 'LIKE') [default: 'HELPFUL']
  created_at timestamp [default: `now()`]
  
  indexes {
    (review_id, user_id, type) [unique]
  }
}

// 평점 가중치 설정 테이블 (REQ-REVIEW-002)
Table rating_weight_config {
  id bigint [pk, increment]
  name varchar(100) [unique, not null]
  description text
  recent_months int [default: 6, note: '최근 N개월 기준']
  recent_weight decimal(3,2) [default: 1.2, note: '최근 리뷰 가중치']
  old_weight decimal(3,2) [default: 0.8, note: '오래된 리뷰 가중치']
  untrusted_weight decimal(3,2) [default: 0.0, note: '비정상 계정 가중치']
  is_active boolean [default: true]
  created_at timestamp [default: `now()`]
  updated_at timestamp
}

// ==========================================
// 댓글 관련 테이블
// ==========================================

Table comments {
  id bigint [pk, increment]
  user_id bigint [not null, ref: > users.id]
  review_id bigint [ref: > reviews.id, note: '리뷰 댓글']
  feed_id bigint [ref: > feeds.id, note: '피드 댓글']
  parent_comment_id bigint [ref: > comments.id, note: '대댓글용']
  content text [not null]
  like_count int [default: 0]
  depth int [default: 1, note: '최대 depth 2']
  status enum('ACTIVE', 'DELETED', 'DELETED_BY_ADMIN') [default: 'ACTIVE']
  deleted_content text [note: '삭제 시 원본 보존 (관리자 확인용)']
  created_at timestamp [default: `now()`]
  updated_at timestamp
  deleted_at timestamp
  
  indexes {
    user_id
    review_id
    feed_id
    parent_comment_id
    status
  }
}

Table comment_mentions {
  id bigint [pk, increment]
  comment_id bigint [not null, ref: > comments.id]
  mentioned_user_id bigint [not null, ref: > users.id]
  created_at timestamp [default: `now()`]
  
  indexes {
    comment_id
    mentioned_user_id
  }
}

// 댓글 반응 테이블 (REQ-CMT-002)
Table comment_reactions {
  id bigint [pk, increment]
  comment_id bigint [not null, ref: > comments.id]
  user_id bigint [not null, ref: > users.id]
  type enum('LIKE', 'EMPATHY') [default: 'LIKE', note: '공감순 정렬용']
  created_at timestamp [default: `now()`]
  
  indexes {
    (comment_id, user_id, type) [unique]
  }
}

// ==========================================
// 매칭 관련 테이블
// ==========================================

Table matchings {
  id bigint [pk, increment]
  requester_id bigint [not null, ref: > users.id]
  responder_id bigint [not null, ref: > users.id]
  plan_id bigint
  status enum('PENDING', 'ACCEPTED', 'REJECTED', 'COMPLETED', 'CANCELLED', 'REJECTED_BY_ADMIN') [default: 'PENDING']
  rejection_reason text
  admin_cancel_reason text [note: 'REQ-ADMIN-003: 관리자 강제 변경 사유']
  completed_at timestamp
  review_deadline timestamp [note: '매칭 종료 후 14일 이내 리뷰 작성 기한']
  created_at timestamp [default: `now()`]
  updated_at timestamp
  
  indexes {
    requester_id
    responder_id
    status
    completed_at
  }
}

// ==========================================
// 신고 관련 테이블
// ==========================================

Table reports {
  id bigint [pk, increment]
  reporter_id bigint [not null, ref: > users.id]
  reported_user_id bigint [ref: > users.id]
  reported_feed_id bigint [ref: > feeds.id]
  reported_review_id bigint [ref: > reviews.id]
  reported_comment_id bigint [ref: > comments.id]
  type enum('SPAM', 'ABUSE', 'FAKE', 'INAPPROPRIATE', 'VIOLENCE', 'HARASSMENT', 'OTHER') [not null]
  description text [not null]
  evidence_url varchar(500)
  status enum('PENDING', 'REVIEWED', 'RESOLVED') [default: 'PENDING']
  action_taken enum('NO_ACTION', 'WARNING', 'HIDDEN', 'DELETED', 'USER_BLOCKED')
  action_reason text
  reviewed_by bigint [ref: > admin_users.id]
  reviewed_at timestamp
  resolved_at timestamp
  created_at timestamp [default: `now()`]
  
  indexes {
    reporter_id
    status
    type
    created_at
  }
}

// ==========================================
// 포인트/뱃지 관련 테이블
// ==========================================

Table point_transactions {
  id bigint [pk, increment]
  user_id bigint [not null, ref: > users.id]
  amount int [not null]
  type enum('REVIEW_WRITE', 'COMMENT_WRITE', 'HELPFUL_RECEIVED', 'REPORT_VALIDATED', 'DAILY_LOGIN', 'PENALTY', 'ADMIN_ADJUST', 'SPAM_PENALTY', 'DELETE_PENALTY') [not null]
  reference_id bigint [note: '관련 엔티티 ID']
  reference_type varchar(50) [note: '관련 엔티티 타입']
  description text
  balance_after int [not null]
  is_reversed boolean [default: false, note: '포인트 차감/무효 처리 여부']
  created_at timestamp [default: `now()`]
  
  indexes {
    user_id
    type
    created_at
  }
}

// 포인트 정정 원장 (REQ-BADGE-002)
Table point_corrections {
  id bigint [pk, increment]
  user_id bigint [not null, ref: > users.id]
  original_transaction_id bigint [ref: > point_transactions.id]
  correction_amount int [not null]
  reason enum('SPAM_DETECTED', 'CONTENT_DELETED', 'ADMIN_CORRECTION', 'ANTIABUSE') [not null]
  description text
  balance_before int [not null]
  balance_after int [not null]
  admin_id bigint [ref: > admin_users.id]
  created_at timestamp [default: `now()`]
  
  indexes {
    user_id
    created_at
  }
}

Table badges {
  id bigint [pk, increment]
  name varchar(100) [unique, not null]
  description text
  icon_url varchar(500)
  condition_type enum('POINTS', 'REVIEWS', 'CONSECUTIVE_DAYS', 'FIRST_REVIEW', 'HELPFUL_COUNT', 'LEVEL_REACH', 'CUSTOM') [not null]
  condition_value int
  priority int [default: 0, note: '정렬 우선순위 (중요도)']
  reward_type enum('NONE', 'COUPON', 'FEATURE_UNLOCK', 'POINT_BONUS') [default: 'NONE']
  reward_value varchar(255)
  created_at timestamp [default: `now()`]
}

Table user_badges {
  id bigint [pk, increment]
  user_id bigint [not null, ref: > users.id]
  badge_id bigint [not null, ref: > badges.id]
  earned_at timestamp [default: `now()`]
  
  indexes {
    (user_id, badge_id) [unique]
  }
}

// ==========================================
// 미디어 관련 테이블
// ==========================================

Table media_files {
  id bigint [pk, increment]
  uploader_id bigint [not null, ref: > users.id]
  original_filename varchar(255) [not null]
  storage_path varchar(500) [not null, note: '/tenant/{env}/{yyyy}/{mm}/{uuid}']
  file_type enum('IMAGE', 'VIDEO') [not null]
  mime_type varchar(100) [not null]
  file_size bigint [not null, note: 'bytes']
  width int
  height int
  duration int [note: '영상 길이(초)']
  thumbnail_64_url varchar(500)
  thumbnail_320_url varchar(500)
  thumbnail_720_url varchar(500)
  thumbnail_1280_url varchar(500)
  nsfw_score decimal(3,2) [note: '0.00~1.00']
  is_nsfw boolean [default: false]
  access_level enum('PUBLIC', 'PRIVATE', 'FOLLOWERS_ONLY') [default: 'PUBLIC']
  virus_scan_status enum('PENDING', 'CLEAN', 'INFECTED') [default: 'PENDING']
  virus_scan_at timestamp
  created_at timestamp [default: `now()`]
  expires_at timestamp
  deleted_at timestamp
  
  indexes {
    uploader_id
    file_type
    created_at
    is_nsfw
  }
}

Table media_tags {
  id bigint [pk, increment]
  media_id bigint [not null, ref: > media_files.id]
  tag varchar(100) [not null]
  confidence decimal(3,2) [not null, note: '0.00~1.00']
  source enum('AI', 'USER', 'ADMIN') [default: 'AI']
  created_at timestamp [default: `now()`]
  
  indexes {
    media_id
    tag
  }
}

// ==========================================
// 알림 관련 테이블
// ==========================================

Table notifications {
  id bigint [pk, increment]
  user_id bigint [not null, ref: > users.id]
  type enum('NEW_COMMENT', 'NEW_MENTION', 'NEW_HELPFUL', 'REPORT_PROCESSED', 'REVIEW_RECEIVED', 'MATCHING_REQUEST', 'BADGE_EARNED', 'REVIEW_DEADLINE', 'CONTENT_MODERATED') [not null]
  title varchar(255) [not null]
  content text
  reference_id bigint
  reference_type varchar(50)
  is_read boolean [default: false]
  sent_email boolean [default: false]
  sent_push boolean [default: false]
  created_at timestamp [default: `now()`]
  read_at timestamp
  
  indexes {
    user_id
    is_read
    created_at
  }
}

// 알림 설정 (REQ-CMT-004)
Table notification_preferences {
  id bigint [pk, increment]
  user_id bigint [unique, not null, ref: > users.id]
  in_app_enabled boolean [default: true]
  email_enabled boolean [default: false]
  push_enabled boolean [default: false]
  comment_on_review boolean [default: true]
  comment_on_comment boolean [default: true]
  mention boolean [default: true]
  helpful_received boolean [default: true]
  report_result boolean [default: true]
  created_at timestamp [default: `now()`]
  updated_at timestamp
}

// ==========================================
// 관리자 로그 테이블
// ==========================================

Table admin_action_logs {
  id bigint [pk, increment]
  admin_id bigint [not null, ref: > admin_users.id]
  action_type enum('USER_BLOCK', 'USER_UNBLOCK', 'CONTENT_HIDE', 'CONTENT_DELETE', 'REVIEW_MODERATE', 'REPORT_PROCESS', 'POINT_ADJUST', 'MATCHING_CANCEL') [not null]
  target_type varchar(50) [not null]
  target_id bigint [not null]
  reason text [not null]
  metadata json
  ip_address varchar(45)
  user_agent text
  created_at timestamp [default: `now()`]
  
  indexes {
    admin_id
    action_type
    created_at
  }
}

// ==========================================
// 스팸 필터 관련 테이블
// ==========================================

Table spam_keywords {
  id bigint [pk, increment]
  keyword varchar(100) [unique, not null]
  severity enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL') [default: 'MEDIUM']
  auto_action enum('NONE', 'FLAG', 'HIDE', 'BLOCK') [default: 'FLAG']
  is_active boolean [default: true]
  created_at timestamp [default: `now()`]
  created_by bigint [ref: > admin_users.id]
}

Table spam_whitelist {
  id bigint [pk, increment]
  user_id bigint [unique, ref: > users.id]
  reason text
  added_by bigint [ref: > admin_users.id]
  created_at timestamp [default: `now()`]
  expires_at timestamp
}

// ==========================================
// 베스트 후기 관련 테이블
// ==========================================

// 베스트 후기 선정 이력 (REQ-REVIEW-004)
Table best_review_history {
  id bigint [pk, increment]
  review_id bigint [not null, ref: > reviews.id]
  type enum('WEEKLY', 'MONTHLY') [not null]
  selected_date date [not null]
  score decimal(10,2) [note: '도움됨 점수 + 신뢰도 등 점수화']
  rank int
  is_manually_fixed boolean [default: false, note: '관리자 수동 고정']
  fixed_by bigint [ref: > admin_users.id]
  created_at timestamp [default: `now()`]
  
  indexes {
    review_id
    type
    selected_date
  }
}

// 베스트 후기 점수 계산 기준 (REQ-REVIEW-004)
Table best_review_criteria {
  id bigint [pk, increment]
  name varchar(100) [not null]
  helpful_weight decimal(3,2) [default: 0.4, note: '도움됨 가중치']
  report_penalty decimal(3,2) [default: -0.3, note: '신고 페널티']
  trust_weight decimal(3,2) [default: 0.3, note: '작성자 신뢰도 가중치']
  recency_weight decimal(3,2) [default: 0.2, note: '최신성 가중치']
  top_n_weekly int [default: 10]
  top_n_monthly int [default: 30]
  is_active boolean [default: true]
  created_at timestamp [default: `now()`]
  updated_at timestamp
}

// 사용자별 일일/주간 포인트 제한 (REQ-BADGE-001)
Table point_limits {
  id bigint [pk, increment]
  user_id bigint [not null, ref: > users.id]
  date date [not null]
  daily_earned int [default: 0]
  weekly_earned int [default: 0]
  daily_transaction_count int [default: 0]
  same_target_count int [default: 0, note: '동일 상대 반복 방지']
  created_at timestamp [default: `now()`]
  updated_at timestamp
  
  indexes {
    (user_id, date) [unique]
  }
}

// 안티어뷰즈 규칙 (REQ-BADGE-001)
Table antiabuse_rules {
  id bigint [pk, increment]
  rule_type enum('SAME_TARGET_LIMIT', 'DAILY_LIMIT', 'WEEKLY_LIMIT', 'VELOCITY_CHECK') [not null]
  action_type varchar(50) [not null, note: 'REVIEW_WRITE, COMMENT_WRITE 등']
  max_count int [not null]
  time_window_hours int [not null]
  is_active boolean [default: true]
  created_at timestamp [default: `now()`]
}