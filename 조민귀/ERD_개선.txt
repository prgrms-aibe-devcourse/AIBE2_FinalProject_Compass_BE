# 📝 Review, Media & System Monitoring Domains ERD - 조민귀

## 📋 담당 도메인
1. Review System Domain: 리뷰 관리, 평점, 댓글
2. Media Management Domain: 이미지/동영상 관리, 스토리지
3. System Monitoring Domain: 로깅, 모니터링, 분석

---

# Domain 1: Review System

## 📊 Entities

### 리뷰
```sql
Review {
    review_id: UUID (PK)
    user_id: UUID (FK → User Management Domain)
    reviewable_type: ENUM('trip', 'place', 'restaurant', 'accommodation')
    reviewable_id: UUID
    rating: INT (1-5)
    title: VARCHAR(255)
    content: TEXT
    pros: TEXT
    cons: TEXT
    visit_date: DATE
    helpful_count: INT DEFAULT 0
    report_count: INT DEFAULT 0
    status: ENUM('active', 'hidden', 'deleted')
    created_at: TIMESTAMP
    updated_at: TIMESTAMP
}
```

### 리뷰 이미지
```sql
ReviewImage {
    image_id: UUID (PK)
    review_id: UUID (FK → Review)
    media_id: UUID (FK → Media Management Domain)
    caption: VARCHAR(500)
    order_index: INT
    created_at: TIMESTAMP
}
```

### 리뷰 평가
```sql
ReviewRating {
    rating_id: UUID (PK)
    review_id: UUID (FK → Review)
    user_id: UUID (FK → User Management Domain)
    is_helpful: BOOLEAN
    created_at: TIMESTAMP
    UNIQUE KEY (review_id, user_id)
}
```

### 리뷰 댓글
```sql
ReviewComment {
    comment_id: UUID (PK)
    review_id: UUID (FK → Review)
    user_id: UUID (FK → User Management Domain)
    parent_comment_id: UUID (FK → ReviewComment)
    content: TEXT
    status: ENUM('active', 'hidden', 'deleted')
    created_at: TIMESTAMP
    updated_at: TIMESTAMP
}
```

### 리뷰 신고
```sql
ReviewReport {
    report_id: UUID (PK)
    review_id: UUID (FK → Review)
    reporter_id: UUID (FK → User Management Domain)
    reason: ENUM('spam', 'inappropriate', 'fake', 'offensive', 'other')
    description: TEXT
    status: ENUM('pending', 'reviewed', 'resolved', 'dismissed')
    reviewed_by: UUID (FK → User Management Domain)
    resolved_at: TIMESTAMP
    created_at: TIMESTAMP
}
```

### 리뷰 통계
```sql
ReviewStatistics {
    stat_id: UUID (PK)
    reviewable_type: VARCHAR(50)
    reviewable_id: UUID
    total_reviews: INT DEFAULT 0
    average_rating: DECIMAL(2,1)
    rating_distribution: JSON
    updated_at: TIMESTAMP
}
```

## 🔵 External APIs (Review System Domain)

### Review Management
```yaml
GET /api/reviews:
  Description: "리뷰 목록 조회"
  Query: page, size, type?, rating?, sort?
  Response: ReviewListResponse
  
GET /api/reviews/{reviewId}:
  Description: "리뷰 상세 조회"
  Response: ReviewDetailResponse
  
POST /api/reviews:
  Description: "리뷰 작성"
  Body: { reviewable_type, reviewable_id, rating, title, content, pros?, cons? }
  Response: ReviewResponse
  
PUT /api/reviews/{reviewId}:
  Description: "리뷰 수정"
  Body: { rating?, title?, content?, pros?, cons? }
  Response: ReviewResponse
  
DELETE /api/reviews/{reviewId}:
  Description: "리뷰 삭제"
  Response: 204 No Content
  
POST /api/reviews/{reviewId}/helpful:
  Description: "도움이 됨 표시"
  Body: { is_helpful }
  Response: HelpfulResponse
```

### Review Comments
```yaml
GET /api/reviews/{reviewId}/comments:
  Description: "댓글 목록 조회"
  Query: page, size
  Response: CommentListResponse
  
POST /api/reviews/{reviewId}/comments:
  Description: "댓글 작성"
  Body: { content, parent_comment_id? }
  Response: CommentResponse
  
PUT /api/comments/{commentId}:
  Description: "댓글 수정"
  Body: { content }
  Response: CommentResponse
  
DELETE /api/comments/{commentId}:
  Description: "댓글 삭제"
  Response: 204 No Content
```

### Review Statistics
```yaml
GET /api/reviews/stats/{type}/{id}:
  Description: "리뷰 통계 조회"
  Response: ReviewStatisticsResponse
  
GET /api/reviews/place/{placeId}:
  Description: "장소 리뷰 조회"
  Query: page, size, sort?
  Response: PlaceReviewsResponse
  
GET /api/reviews/trip/{tripId}:
  Description: "여행 리뷰 조회"
  Query: page, size, sort?
  Response: TripReviewsResponse
  
GET /api/reviews/user/{userId}:
  Description: "사용자 리뷰 조회"
  Query: page, size
  Response: UserReviewsResponse
```

### Review Reporting
```yaml
POST /api/reviews/{reviewId}/report:
  Description: "리뷰 신고"
  Body: { reason, description? }
  Response: ReportResponse
  
GET /api/admin/reports:
  Description: "신고 목록 (관리자)"
  Query: page, size, status?
  Response: ReportListResponse
  
PUT /api/admin/reports/{reportId}:
  Description: "신고 처리 (관리자)"
  Body: { status, resolution? }
  Response: ReportUpdateResponse
```

## 🔴 Internal APIs (Review System Domain)

```yaml
GET /api/internal/reviews/validate:
  Description: "리뷰 유효성 검증"
  Query: review_id, user_id
  
POST /api/internal/reviews/stats/update:
  Description: "통계 업데이트"
  Body: { reviewable_type, reviewable_id }
  
GET /api/internal/users/{userId}/rating:
  Description: "사용자 평점 조회"
  Response: UserRatingResponse
  
POST /api/internal/reviews/cleanup:
  Description: "삭제된 리뷰 정리"
```

---

# Domain 2: Media Management

## 📊 Entities

### 미디어 파일
```sql
Media {
    media_id: UUID (PK)
    uploaded_by: UUID (FK → User Management Domain)
    file_type: ENUM('image', 'video', 'document')
    mime_type: VARCHAR(100)
    file_name: VARCHAR(255)
    file_size: BIGINT
    storage_path: VARCHAR(500)
    storage_provider: VARCHAR(50)
    cdn_url: VARCHAR(500)
    thumbnail_url: VARCHAR(500)
    width: INT
    height: INT
    duration: INT (for videos)
    metadata: JSON
    is_public: BOOLEAN DEFAULT true
    created_at: TIMESTAMP
}
```

### 미디어 태그
```sql
MediaTag {
    tag_id: UUID (PK)
    media_id: UUID (FK → Media)
    tag_name: VARCHAR(50)
    created_at: TIMESTAMP
}
```

### 미디어 처리 큐
```sql
MediaProcessingQueue {
    queue_id: UUID (PK)
    media_id: UUID (FK → Media)
    operation: VARCHAR(50)
    parameters: JSON
    status: ENUM('pending', 'processing', 'completed', 'failed')
    attempts: INT DEFAULT 0
    error_message: TEXT
    created_at: TIMESTAMP
    processed_at: TIMESTAMP
}
```

### 미디어 버전
```sql
MediaVersion {
    version_id: UUID (PK)
    original_media_id: UUID (FK → Media)
    version_type: VARCHAR(50)
    file_path: VARCHAR(500)
    cdn_url: VARCHAR(500)
    width: INT
    height: INT
    file_size: BIGINT
    created_at: TIMESTAMP
}
```

### 미디어 사용 기록
```sql
MediaUsage {
    usage_id: UUID (PK)
    media_id: UUID (FK → Media)
    used_in_type: VARCHAR(50)
    used_in_id: UUID
    created_at: TIMESTAMP
}
```

## 🔵 External APIs (Media Management Domain)

### Media Upload & Management
```yaml
POST /api/media/upload:
  Description: "미디어 업로드"
  Body: MultipartFile
  Response: MediaUploadResponse
  
POST /api/media/upload-multiple:
  Description: "다중 미디어 업로드"
  Body: MultipartFile[]
  Response: MediaUploadMultipleResponse
  
GET /api/media/{mediaId}:
  Description: "미디어 조회"
  Response: MediaResponse
  
PUT /api/media/{mediaId}:
  Description: "미디어 메타데이터 수정"
  Body: { file_name?, tags?, is_public? }
  Response: MediaResponse
  
DELETE /api/media/{mediaId}:
  Description: "미디어 삭제"
  Response: 204 No Content
```

### Media Processing
```yaml
POST /api/media/{mediaId}/resize:
  Description: "이미지 리사이징"
  Body: { width?, height?, maintain_ratio? }
  Response: MediaProcessingResponse
  
POST /api/media/{mediaId}/compress:
  Description: "미디어 압축"
  Body: { quality?, format? }
  Response: MediaProcessingResponse
  
POST /api/media/{mediaId}/thumbnail:
  Description: "썸네일 생성"
  Body: { width?, height? }
  Response: ThumbnailResponse
  
GET /api/media/{mediaId}/versions:
  Description: "미디어 버전 목록"
  Response: MediaVersionListResponse
```

### Media Query
```yaml
GET /api/media/user/{userId}:
  Description: "사용자 미디어 조회"
  Query: page, size, type?
  Response: UserMediaListResponse
  
GET /api/media/trip/{tripId}:
  Description: "여행 미디어 조회"
  Query: page, size, type?
  Response: TripMediaListResponse
  
POST /api/media/search:
  Description: "미디어 검색"
  Body: { tags?, type?, uploaded_after?, uploaded_before? }
  Response: MediaSearchResponse
```

## 🔴 Internal APIs (Media Management Domain)

```yaml
POST /api/internal/media/process:
  Description: "미디어 처리 작업"
  Body: { media_id, operation, parameters }
  
GET /api/internal/media/storage-stats:
  Description: "스토리지 사용량 통계"
  Response: StorageStatsResponse
  
POST /api/internal/media/cleanup:
  Description: "미사용 미디어 정리"
  Body: { older_than_days }
  
POST /api/internal/media/cdn-sync:
  Description: "CDN 동기화"
  Body: { media_ids[] }
```

---

# Domain 3: System Monitoring

## 📊 Entities

### 시스템 로그
```sql
SystemLog {
    log_id: UUID (PK)
    service_name: VARCHAR(100)
    log_level: ENUM('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')
    message: TEXT
    context: JSON
    stack_trace: TEXT
    created_at: TIMESTAMP (with index)
}
```

### API 메트릭
```sql
APIMetric {
    metric_id: UUID (PK)
    endpoint: VARCHAR(500)
    method: VARCHAR(10)
    response_time: INT
    status_code: INT
    user_id: UUID
    ip_address: VARCHAR(50)
    user_agent: VARCHAR(500)
    created_at: TIMESTAMP (with index)
}
```

### 에러 추적
```sql
ErrorTracking {
    error_id: UUID (PK)
    error_type: VARCHAR(255)
    error_message: TEXT
    stack_trace: TEXT
    service_name: VARCHAR(100)
    environment: VARCHAR(50)
    occurrence_count: INT DEFAULT 1
    first_seen: TIMESTAMP
    last_seen: TIMESTAMP
    resolved: BOOLEAN DEFAULT false
}
```

### 시스템 상태
```sql
SystemHealth {
    health_id: UUID (PK)
    service_name: VARCHAR(100)
    status: ENUM('healthy', 'degraded', 'unhealthy')
    cpu_usage: DECIMAL(5,2)
    memory_usage: DECIMAL(5,2)
    disk_usage: DECIMAL(5,2)
    response_time_avg: INT
    error_rate: DECIMAL(5,2)
    checked_at: TIMESTAMP
}
```

### 사용자 활동 로그
```sql
ActivityLog {
    activity_id: UUID (PK)
    user_id: UUID
    action: VARCHAR(100)
    resource_type: VARCHAR(50)
    resource_id: VARCHAR(255)
    metadata: JSON
    ip_address: VARCHAR(50)
    created_at: TIMESTAMP (with index)
}
```

### 알림 설정
```sql
AlertConfiguration {
    alert_id: UUID (PK)
    alert_type: VARCHAR(50)
    threshold: JSON
    notification_channels: JSON
    is_active: BOOLEAN DEFAULT true
    created_at: TIMESTAMP
}
```

## 🔵 External APIs (System Monitoring Domain)

### Monitoring & Health
```yaml
GET /api/monitoring/health:
  Description: "시스템 상태 조회"
  Response: SystemHealthResponse
  
GET /api/monitoring/metrics:
  Description: "메트릭 조회"
  Query: service?, period?, metric_type?
  Response: MetricsResponse
  
GET /api/monitoring/services:
  Description: "서비스 상태 목록"
  Response: ServiceStatusListResponse
```

### Logging & Analytics
```yaml
POST /api/logs/query:
  Description: "로그 검색"
  Body: { service?, level?, start_time?, end_time?, search? }
  Response: LogQueryResponse
  
GET /api/analytics/dashboard:
  Description: "분석 대시보드"
  Query: period?
  Response: DashboardResponse
  
GET /api/analytics/activity:
  Description: "활동 분석"
  Query: user_id?, resource_type?, period?
  Response: ActivityAnalyticsResponse
```

### Error Management
```yaml
GET /api/errors:
  Description: "에러 목록"
  Query: page, size, resolved?, service?
  Response: ErrorListResponse
  
GET /api/errors/{errorId}:
  Description: "에러 상세"
  Response: ErrorDetailResponse
  
PUT /api/errors/{errorId}/resolve:
  Description: "에러 해결 처리"
  Response: ErrorResolveResponse
```

### Alert Management
```yaml
GET /api/alerts/configurations:
  Description: "알림 설정 목록"
  Response: AlertConfigurationListResponse
  
POST /api/alerts/configure:
  Description: "알림 설정 생성"
  Body: { alert_type, threshold, notification_channels }
  Response: AlertConfigurationResponse
  
PUT /api/alerts/{alertId}:
  Description: "알림 설정 수정"
  Body: { threshold?, notification_channels?, is_active? }
  Response: AlertConfigurationResponse
```

## 🔴 Internal APIs (System Monitoring Domain)

```yaml
POST /api/internal/logs/ingest:
  Description: "로그 수집"
  Body: { service_name, level, message, context }
  
POST /api/internal/metrics/record:
  Description: "메트릭 기록"
  Body: { endpoint, method, response_time, status_code }
  
POST /api/internal/activity/track:
  Description: "활동 추적"
  Body: { user_id, action, resource_type, resource_id }
  
POST /api/internal/health/check:
  Description: "헬스 체크"
  Body: { service_name }
  
POST /api/internal/alerts/trigger:
  Description: "알림 트리거"
  Body: { alert_type, data }
```

---

## 🔗 외부 도메인 의존성

### 필요한 외부 API
```yaml
User Management Domain:
  - GET /api/users/{userId}: "사용자 정보 조회"
  - GET /api/internal/users/validate: "사용자 유효성 검증"
  
Trip Planning Domain:
  - GET /api/trips/{tripId}: "여행 정보 조회"
  - GET /api/places/{placeId}: "장소 정보 조회"
  
AI Client Domain:
  - GET /api/chat/usage: "AI 사용량 조회"
  
All Domains:
  - POST /api/internal/logs/ingest: "로그 수집 (모든 도메인에서 호출)"
  - POST /api/internal/metrics/record: "메트릭 기록 (모든 도메인에서 호출)"
```

---

## 💡 핵심 비즈니스 로직

### Review System Domain
1. **리뷰 작성 플로우**: 유효성 검증 → 리뷰 저장 → 평점 계산 → 통계 업데이트
2. **도움이 됨 시스템**: 투표 수집 → 가중치 계산 → 정렬 반영
3. **신고 처리**: 신고 접수 → 관리자 검토 → 조치 결정 → 상태 업데이트

### Media Management Domain
1. **업로드 플로우**: 파일 검증 → 스토리지 저장 → CDN 업로드 → 썸네일 생성
2. **이미지 처리**: 큐 등록 → 비동기 처리 → 버전 생성 → CDN 동기화
3. **스토리지 관리**: 사용량 추적 → 미사용 파일 탐지 → 자동 정리

### System Monitoring Domain
1. **로그 수집**: 서비스 로그 → 중앙 집중화 → 인덱싱 → 분석
2. **메트릭 수집**: API 호출 → 응답 시간 측정 → 통계 집계 → 대시보드 표시
3. **알림 시스템**: 임계치 모니터링 → 조건 충족 → 알림 발송 → 에스컬레이션
4. **헬스 체크**: 정기적 상태 확인 → 메트릭 수집 → 이상 감지 → 자동 복구

---

## 🔐 보안 고려사항

- 리뷰 작성자 검증
- 미디어 업로드 파일 검증
- CDN 접근 제어
- 로그 민감정보 마스킹
- API Rate Limiting
- XSS/SQL Injection 방어
- 파일 업로드 크기 제한
- 악성 파일 스캔