✈️ 여행 추천 서비스 상세 API 명세서 (요구사항 ID 포함 최종본)
1. 사용자 인증 (User Authentication)
1.1. POST /api/users/signup (회원가입)
요구사항 ID: REJ-USER-001

설명: 이메일, 비밀번호, 닉네임으로 새로운 사용자를 생성합니다.

Request:

Body: SignUpRequest

email (String, Required): 사용자 이메일.

password (String, Required): 비밀번호.

nickname (String, Required): 닉네임.

Response:

201 Created: UserResponse

400 Bad Request: 입력값 유효성 검증 실패.

409 Conflict: 이메일 또는 닉네임 중복.

비즈니스 로직:

이메일, 닉네임 중복 여부를 확인합니다.

비밀번호 정책을 검증하고 해시화하여 users 테이블에 저장합니다.

예제:

Request

JSON

{
  "email": "traveler@example.com",
  "password": "MyComplexPassword123!",
  "nickname": "여행이좋아"
}
Response (201 Created)

JSON

{
  "id": "123e4567-e89b-12d3-a456-426614174000",
  "email": "traveler@example.com",
  "nickname": "여행이좋아",
  "createdAt": "2025-08-26T10:37:00Z"
}
1.2. POST /api/auth/login (로그인)
요구사항 ID: REJ-USER-002, REJ-USER-003

설명: 이메일과 비밀번호로 사용자를 인증하고 JWT 토큰을 발급합니다.

Request:

Body: LoginRequest (email, password)

Response:

200 OK: TokenResponse

401 Unauthorized: 자격 증명 실패.

비즈니스 로직:

사용자 인증 후 Access/Refresh 토큰을 생성하여 반환합니다.

login_history 테이블에 로그인 기록을 저장합니다.

예제:

Request

JSON

{
  "email": "traveler@example.com",
  "password": "MyComplexPassword123!"
}
Response (200 OK)

JSON

{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "refreshToken": "def50200..."
}
1.3. POST /api/auth/logout (로그아웃)
요구사항 ID: REJ-USER-002

설명: 사용자를 로그아웃 처리하고 Refresh Token을 비활성화합니다.

Request:

Body: LogoutRequest (refreshToken)

Response:

204 No Content

400 Bad Request: Refresh Token이 유효하지 않을 경우.

비즈니스 로직:

전달받은 Refresh Token을 DB 블랙리스트에 추가하여 재사용을 막습니다.

예제:

Request

JSON

{
  "refreshToken": "def50200..."
}
Response (204 No Content): (Body 내용 없음)

1.4. POST /api/auth/refresh (토큰 갱신)
요구사항 ID: REJ-USER-003

설명: 유효한 Refresh Token으로 새로운 Access Token을 발급받습니다.

Request:

Body: RefreshRequest (refreshToken)

Response:

200 OK: AccessTokenResponse (accessToken)

401 Unauthorized: Refresh Token이 만료되었거나 유효하지 않을 경우.

비즈니스 로직:

Refresh Token을 검증하고 새로운 Access Token을 발급합니다.

예제:

Request

JSON

{
  "refreshToken": "def50200..."
}
Response (200 OK)

JSON

{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... (new)"
}
1.5. GET /api/auth/social/{provider} (소셜 로그인)
요구사항 ID: REJ-USER-008

설명: 지정된 소셜 서비스(Google, Kakao)의 인증 페이지로 사용자를 리디렉션하고, 콜백을 통해 로그인/가입 처리 후 토큰을 발급합니다.

Request:

Path Parameter: provider (String, google 또는 kakao)

(Callback) Query Parameter: code (String, 소셜 서비스가 제공)

Response:

302 Found: 소셜 인증 페이지로 리디렉션.

(Callback) 200 OK: TokenResponse

비즈니스 로직:

/api/auth/social/{provider} 호출 시 소셜 제공사 인증 페이지로 리디렉션합니다.

사용자가 인증을 완료하면 제공사는 /callback 경로로 code와 함께 리디렉션합니다.

서버는 code를 이용해 소셜 제공사로부터 사용자 정보를 받고, 이를 기반으로 회원가입 또는 로그인을 처리한 뒤 JWT를 발급합니다.

예제:

Request: GET /api/auth/social/google

Response (302 Found): (Redirects to Google's login page)

(After user login) Request to our server: GET /api/auth/social/google/callback?code=AUTH_CODE_FROM_GOOGLE

Response (200 OK)

JSON

{
  "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "refreshToken": "def50200..."
}
2. 사용자 프로필 및 계정 (User Profile & Account)
2.1. GET /api/users/me (내 프로필 조회)
요구사항 ID: REJ-USER-004

설명: 현재 로그인된 사용자의 프로필 정보를 조회합니다.

Request:

Headers: Authorization: Bearer {accessToken}

Response:

200 OK: UserProfileResponse

401 Unauthorized: 토큰이 없거나 유효하지 않음.

비즈니스 로직:

accessToken을 검증하여 사용자 ID를 추출하고 DB에서 프로필 정보를 조회합니다.

예제:

Request: GET /api/users/me

Response (200 OK)

JSON

{
  "id": "123e4567-e89b-12d3-a456-426614174000",
  "email": "traveler@example.com",
  "nickname": "여행이좋아",
  "profileImageUrl": null,
  "preferredRegion": "부산"
}
2.2. PUT /api/users/me (프로필 수정)
요구사항 ID: REJ-USER-004

설명: 현재 로그인된 사용자의 프로필 정보를 수정합니다.

Request:

Headers: Authorization: Bearer {accessToken}

Body: UpdateProfileRequest (nickname, preferredRegion)

Response:

200 OK: UserProfileResponse (수정된 전체 프로필)

409 Conflict: 닉네임 중복.

비즈니스 로직:

accessToken 검증 후 요청된 필드의 유효성을 검사하고 users 테이블을 업데이트합니다.

예제:

Request

JSON

{
  "nickname": "제주앓이",
  "preferredRegion": "제주"
}
Response (200 OK)

JSON

{
  "id": "123e4567-e89b-12d3-a456-426614174000",
  "email": "traveler@example.com",
  "nickname": "제주앓이",
  "profileImageUrl": null,
  "preferredRegion": "제주"
}
2.3. POST /api/users/password/reset (비밀번호 재설정)
요구사항 ID: REJ-USER-005

설명: 비밀번호 재설정을 요청하고, 이메일로 받은 토큰으로 새 비밀번호를 설정합니다. (두 단계를 하나의 설명으로 통합)

Request (재설정 요청): POST /api/users/password/reset-request

Body: PasswordResetRequest (email)

Request (새 비밀번호 설정): POST /api/users/password/reset

Body: NewPasswordRequest (token, newPassword)

Response:

204 No Content (두 요청 모두 성공 시)

비즈니스 로직:

/reset-request: 이메일로 사용자를 확인하고, 유효기간이 있는 재설정 토큰을 생성하여 이메일로 발송합니다.

/reset: 토큰의 유효성을 검증한 뒤, 새 비밀번호로 업데이트합니다.

예제:

Request to /reset-request

JSON

{ "email": "traveler@example.com" }
Request to /reset

JSON

{
  "token": "UNIQUE_RESET_TOKEN_FROM_EMAIL",
  "newPassword": "MyNewSecurePassword456!"
}
2.4. POST /api/users/me/security/2fa (계정 보안 강화: 2단계 인증 설정)
요구사항 ID: REJ-USER-009

설명: 사용자의 2단계 인증(2FA)을 활성화/비활성화합니다.

Request:

Headers: Authorization: Bearer {accessToken}

Body: { "enable": true }

Response:

200 OK: { "is2faEnabled": true }

비즈니스 로직:

사용자의 is_2fa_enabled 플래그를 업데이트합니다. (활성화 시 QR 코드 생성 및 등록 절차 추가 필요)

예제:

Request

JSON

{ "enable": true }
Response (200 OK)

JSON

{ "is2faEnabled": true }
2.5. DELETE /api/users/me (회원 탈퇴)
요구사항 ID: REJ-USER-011

설명: 로그인된 사용자가 본인 확인 후 계정을 비활성화(탈퇴)합니다.

Request:

Headers: Authorization: Bearer {accessToken}

Body: WithdrawalRequest (password)

Response:

204 No Content

401 Unauthorized: 비밀번호 불일치.

비즈니스 로직:

비밀번호를 확인하여 본인 인증을 수행합니다.

users 테이블의 status를 WITHDRAWN으로 변경합니다.

예제:

Request

JSON

{
  "password": "MyComplexPassword123!"
}
Response (204 No Content): (Body 내용 없음)

3. 추천 & 큐레이션 (Recommendation & Curation)
3.1. GET /api/recommendations/personalized (개인화 추천)
요구사항 ID: REJ-RECO-001

설명: 사용자의 활동 기록을 기반으로 개인화된 장소/큐레이션을 추천합니다.

Request:

Headers: Authorization: Bearer {accessToken} (선택)

Response:

200 OK: PersonalizedRecsResponse

비즈니스 로직:

(로그인 시) userId로 활동 기록을 분석하여 추천 목록을 생성합니다.

(비로그인 시) 일반적인 인기 항목 목록을 반환합니다.

예제:

Request: GET /api/recommendations/personalized

Response (200 OK)

JSON

{
  "places": [
    { "placeId": "p1", "name": "해동 용궁사", "category": "사찰" },
    { "placeId": "p2", "name": "감천 문화 마을", "category": "마을" }
  ],
  "curations": [
    { "packageId": "c1", "title": "부산 원도심 야경 투어" }
  ]
}
3.2. GET /api/trends (여행 트렌드 분석 제공)
요구사항 ID: REJ-RECO-003

설명: 인기 여행지, 시즌별 트렌드 등 분석 정보를 제공합니다.

Request: GET /api/trends

Response:

200 OK: TrendsResponse

비즈니스 로직:

집계된 통계 데이터를 바탕으로 트렌드 정보를 구성하여 반환합니다.

예제:

Response (200 OK)

JSON

{
  "popularPlaces": [
    { "placeId": "p2", "name": "감천 문화 마을", "monthlyViews": 12000 },
    { "placeId": "p3", "name": "광안리 해수욕장", "monthlyViews": 11500 }
  ],
  "seasonalTrends": {
    "season": "SUMMER",
    "keywords": ["해수욕장", "빙수", "요트"]
  }
}
3.3. GET /api/curations (큐레이션 패키지 제공)
요구사항 ID: REJ-RECO-004

설명: 발행된 모든 큐레이션 패키지 목록을 조회합니다.

Request: GET /api/curations

Response:

200 OK: [CurationPackageResponse]

비즈니스 로직:

curation_packages 테이블에서 활성화된 모든 패키지를 조회합니다.

예제:

Response (200 OK)

JSON

[
  { "packageId": "c1", "title": "부산 원도심 야경 투어", "theme": "야경" },
  { "packageId": "c2", "title": "기장 힐링 카페 투어", "theme": "카페" }
]
4. 관리자 (Admin)
4.1. PUT /api/admin/users/{userId}/role (사용자 권한/역할 관리)
요구사항 ID: REJ-USER-006

설명: 관리자가 특정 사용자의 역할을 변경합니다.

Request:

Headers: Authorization: Bearer {adminAccessToken}

Path Parameter: userId (String, Required)

Body: UpdateRoleRequest (role: "USER" | "ADMIN")

Response:

200 OK: UserResponse

비즈니스 로직:

대상 사용자의 role 필드를 요청된 값으로 업데이트합니다.

예제:

Request: PUT /api/admin/users/123e4567-e89b-12d3-a456-426614174000/role

JSON

{ "role": "ADMIN" }
Response (200 OK)

JSON

{
  "id": "123e4567-e89b-12d3-a456-426614174000",
  "email": "traveler@example.com",
  "nickname": "제주앓이",
  "role": "ADMIN",
  "createdAt": "2025-08-26T10:37:00Z"
}
4.2. PUT /api/admin/content/{contentType}/{contentId}/status (사용자 콘텐츠 승인 관리)
요구사항 ID: REJ-USER-010

설명: 관리자가 리뷰, 사진 등 지정된 콘텐츠의 상태를 승인 또는 반려 처리합니다.

Request:

Headers: Authorization: Bearer {adminAccessToken}

Path Parameters: contentType (String), contentId (String)

Body: UpdateStatusRequest (status, reason?)

Response:

200 OK: { "status": "APPROVED", ... }

비즈니스 로직:

contentType에 따라 대상 테이블을 결정하고, contentId로 항목을 찾아 status를 업데이트합니다.

예제:

Request: PUT /api/admin/content/reviews/a1b2-c3d4-review-uuid/status

JSON

{ "status": "APPROVED" }
Response (200 OK)

JSON

{
  "status": "APPROVED",
  "contentId": "a1b2-c3d4-review-uuid",
  "contentType": "reviews"
}
4.3. GET /api/admin/dashboard (관리자 대시보드)
요구사항 ID: REJ-RECO-006

설명: 신규 가입자, 승인 대기 콘텐츠 수 등 서비스 핵심 지표를 조회합니다.

Request:

Headers: Authorization: Bearer {adminAccessToken}

Response:

200 OK: DashboardResponse

비즈니스 로직:

관련 테이블들을 집계하여 핵심 지표를 반환합니다.

예제:

Request: GET /api/admin/dashboard

Response (200 OK)

JSON

{
  "newUserCount": 150,
  "totalUserCount": 12500,
  "pendingContentCount": 42
}
※ API로 노출되지 않는 백엔드 프로세스
REJ-RECO-002 (추천 모델 학습 파이프라인): API가 아닌, 주기적으로 실행되는 내부 배치(Batch) 작업입니다.

REJ-RECO-005 (추천 모델 A/B 테스트): 별도의 API가 아닌, GET /api/recommendations/personalized API의 내부 로직에 포함됩니다.

REJ-USER-007 (시스템 설정 변경): 관리자용 프론트엔드와 연동되는 PUT /api/admin/settings API 등을 통해 구현됩니다. (별도 명세 생략)