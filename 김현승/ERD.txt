User & Recommendation/Admin 도메인 ERD 분석 결과
사고 과정
1. 요구사항 분석
User 및 Recommendation/Admin 도메인의 요구사항 명세서를 분석한 결과, 다음과 같은 핵심 기능들이 식별되었습니다:

사용자 관리: 회원가입, 로그인/로그아웃, 소셜 로그인, 프로필 관리, 비밀번호 재설정, 회원 탈퇴

인증/인가: JWT 기반 인증, 역할(Role) 기반 권한 관리

보안: 2단계 인증(2FA), 로그인 기록 추적

개인화 추천: 사용자 활동 기반 장소 및 큐레이션 추천

트렌드 분석: 인기 여행지, 시즌별 트렌드 데이터 제공

큐레이션: 관리자가 생성한 여행 패키지 제공

관리자 기능: 대시보드, 사용자 관리, 콘텐츠 승인/반려

2. 엔티티 도출 과정
요구사항에서 다음과 같은 핵심 개념들을 엔티티로 변환했습니다:

사용자 계정 관리 → User

사용자 리뷰 → Review

관리자가 만드는 여행 패키지 → CurationPackage

로그인 활동 추적 → LoginHistory

추천 시스템을 위한 사용자 활동 추적 → UserActivity

장소 정보 → Place (외부 도메인 연동)

여행 계획 → TripPlan (외부 도메인 연동)

최종 ERD
엔티티 정의
1. User (사용자)
User {
    id: UUID (PK)
    email: VARCHAR(255) (UNIQUE)
    password: VARCHAR(255)
    nickname: VARCHAR(100) (UNIQUE)
    profile_image_url: VARCHAR(500)
    preferred_region: VARCHAR(100)
    provider: ENUM('LOCAL', 'GOOGLE', 'KAKAO')
    role: ENUM('USER', 'ADMIN')
    status: ENUM('ACTIVE', 'WITHDRAWN')
    is_2fa_enabled: BOOLEAN
    created_at, updated_at: TIMESTAMP
}
2. Review (리뷰)
Review {
    id: UUID (PK)
    user_id: UUID (FK → User)
    place_id: UUID (FK → Place)
    content: TEXT
    rating: INTEGER
    status: ENUM('PENDING', 'APPROVED', 'REJECTED')
    created_at: TIMESTAMP
}
3. CurationPackage (큐레이션 패키지)
CurationPackage {
    id: UUID (PK)
    created_by: UUID (FK → User, 관리자)
    title: VARCHAR(255)
    description: TEXT
    theme: VARCHAR(100)
    created_at: TIMESTAMP
}
4. CurationPackageItem (큐레이션 항목)
CurationPackageItem {
    id: UUID (PK)
    package_id: UUID (FK → CurationPackage)
    place_id: UUID (FK → Place)
    visit_order: INTEGER
}
5. LoginHistory (로그인 기록)
LoginHistory {
    id: UUID (PK)
    user_id: UUID (FK → User)
    ip_address: VARCHAR(50)
    device_info: TEXT
    login_at: TIMESTAMP
}
6. UserActivity (사용자 활동 로그)
UserActivity {
    id: BIGSERIAL (PK)
    user_id: UUID (FK → User)
    activity_type: VARCHAR(50)
    target_id: VARCHAR(255)
    ab_test_group: VARCHAR(50)
    created_at: TIMESTAMP
}
관계 정의
1:N 관계
User (1) : Review (N) (한 명의 사용자는 여러 리뷰 작성 가능)

User (1) : TripPlan (N) (한 명의 사용자는 여러 여행 계획 보유 가능)

User (1) : LoginHistory (N) (한 명의 사용자는 여러 로그인 기록 보유)

User (1) : UserActivity (N) (한 명의 사용자는 여러 활동 로그 생성)

CurationPackage (1) : CurationPackageItem (N) (하나의 패키지는 여러 장소 포함)

N:M 관계 (Junction Table을 통해 해결)
TripPlan ↔ Place: TripPlanItem 테이블

CurationPackage ↔ Place: CurationPackageItem 테이블

인덱스 전략
User

UNIQUE INDEX on email (로그인 및 가입 시 중복 체크 최적화)

UNIQUE INDEX on nickname (닉네임 중복 체크 최적화)

Review

INDEX on (user_id) (사용자별 리뷰 조회)

INDEX on (place_id) (장소별 리뷰 조회)

INDEX on (status) (관리자의 승인 대기 목록 조회)

UserActivity

INDEX on (user_id, created_at) (특정 사용자의 활동 내역 분석)

INDEX on (activity_type, target_id) (특정 항목에 대한 활동 분석)

비기능 요구사항 고려사항
성능

자주 조회되는 사용자 정보(세션)는 Redis 같은 인메모리 저장소에 캐싱합니다.

UserActivity 같이 대용량 데이터가 예상되는 테이블은 월별 파티셔닝을 고려합니다.

보안

User.password 필드는 bcrypt 같은 단방향 해시 함수로 암호화합니다.

API 요청/응답 시 개인 식별 정보(PII) 노출을 최소화합니다.

데이터 관리

User.status를 WITHDRAWN으로 변경하여 개인정보 보관 주기 정책에 따른 소프트 삭제를 구현합니다.

오래된 로그 데이터(LoginHistory, UserActivity)는 콜드 스토리지로 이전하는 정책을 수립합니다.

API 엔드포인트 및 DTO 설계
요구사항 → 엔드포인트 매핑(발췌)
REQ	설명	엔드포인트
REQ-USER-001	회원가입	POST /api/users/signup
REQ-USER-002	로그인/로그아웃	POST /api/auth/login, POST /api/auth/logout
REQ-USER-003	JWT 토큰 갱신	POST /api/auth/refresh
REQ-USER-004	프로필 조회/수정	GET/PUT /api/users/me
REQ-USER-005	비밀번호 재설정	POST /api/users/password/reset-request
REQ-USER-006	사용자 역할 변경	PUT /api/admin/users/{userId}/role
REQ-USER-008	소셜 로그인	GET /api/auth/social/{provider}
REQ-USER-010	콘텐츠 승인/반려	PUT /api/admin/content/{contentType}/{contentId}/status
REQ-USER-011	회원 탈퇴	DELETE /api/users/me
REQ-RECO-001	개인화 추천 조회	GET /api/recommendations/personalized
REQ-RECO-003	트렌드 분석 조회	GET /api/trends
REQ-RECO-004	큐레이션 목록/상세	GET /api/curations, GET /api/curations/{packageId}
REQ-RECO-006	관리자 대시보드	GET /api/admin/dashboard

Sheets로 내보내기
<br>

ERD → DTO 매핑(?는 선택사항)
SignUpRequest: { email, password, nickname }

LoginRequest: { email, password }

TokenResponse: { accessToken, refreshToken }

UpdateProfileRequest: { nickname?, preferredRegion? }

UserProfileResponse: { id, email, nickname, profileImageUrl?, preferredRegion? }

UpdateRoleRequest: { role }

UpdateStatusRequest: { status, reason? }

PersonalizedRecsResponse: { places[]?, curations[]? }

CurationPackageResponse: { packageId, title, theme }

DashboardResponse: { newUserCount, totalUserCount, pendingContentCount }