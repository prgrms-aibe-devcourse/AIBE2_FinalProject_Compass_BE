openapi: 3.0.3
info:
  title: Compass Trip System API
  description: |
    # Trip 도메인 OpenAPI 명세서

    ## 📋 도메인 구성 요약
    
    ### Trip 도메인이 제공하는 서비스
    - **여행 계획 관리**: 생성, 조회, 수정, 삭제
    - **세부 일정 관리**: 날짜별 아이템 추가, 수정, 삭제
    - **준비물 체크리스트**: 항목 추가, 체크, 수정
    - **참여자 관리**: 초대, 제거, 권한 설정
    
    ## 📊 도메인 간 상호작용
    
    | 도메인 | Trip → 외부 (요청) | 외부 → Trip (호출) | 주요 용도 |
    |---|---|---|---|
    | **User** | • 사용자 정보 조회 | - | 여행 소유자/참여자 정보 확인 |
    | **Place** | • 장소 정보 검색/조회 | - | 일정에 장소 정보 연결 |
    | **Weather** | • 날씨 정보 조회 | - | 일정 기반 날씨 요약 제공 |
    | **Notification** | • 알림 발송 요청 | - | 참여자 초대, 일정 변경 등 알림 |

    ## 🔄 주요 처리 흐름
    
    ### 여행 계획 생성
    1. User Domain에서 사용자 인증 확인
    2. 제목, 기간 등 기본 정보로 Trip 생성
    3. 생성된 Trip ID 반환
    
    ### 일정에 장소 추가
    1. Place Domain에서 장소 검색
    2. 특정 날짜에 장소 정보와 함께 ScheduleItem 생성
    3. 이동 시간/경로 계산 (필요시)
  version: 1.0.0
servers:
  - url: https://api.compass.com/api
    description: Production Server
  - url: http://localhost:8080/api
    description: Development Server
tags:
  - name: Trip - Core
    description: 여행 계획 및 일정 관리
  - name: Place - Core
    description: 장소 검색 및 상세정보
  - name: Reservation - Core
    description: 예약 관리
  - name: Weather - Core
    description: 날씨 정보 및 알림 관리
paths:
  /trips:
    post:
      tags: [Trip - Core]
      summary: 여행 계획 생성
      security:
        - bearerAuth: []
      operationId: createTrip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTripRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /trips/{tripId}:
    patch:
      tags: [Trip - Core]
      summary: 여행 계획 수정/상태 변경
      security:
        - bearerAuth: []
      operationId: updateTrip
      parameters:
        - $ref: '#/components/parameters/tripId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTripRequest'
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409': 
          $ref: '#/components/responses/ConflictError'

  /trips/{tripId}/schedules:
    post:
      tags: [Trip - Core]
      summary: 일정 아이템 추가
      security:
        - bearerAuth: []
      operationId: createSchedule
      parameters:
        - $ref: '#/components/parameters/tripId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScheduleRequest'
      responses:
        '201': 
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /trips/{tripId}/checklist:
    post:
      tags: [Trip - Core]
      summary: 체크리스트 아이템 추가
      security:
        - bearerAuth: []
      operationId: addChecklistItem
      parameters:
        - $ref: '#/components/parameters/tripId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChecklistItemRequest'
      responses:
        '201': 
          description: Created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /trips/{tripId}/participants:
    post:
      tags: [Trip - Core]
      summary: 참여자 초대
      security:
        - bearerAuth: []
      operationId: inviteParticipant
      parameters:
        - $ref: '#/components/parameters/tripId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteParticipantRequest'
      responses:
        '200':
          description: 초대 성공
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /trips/{tripId}/participants/{userId}:
    delete:
      tags: [Trip - Core]
      summary: 참여자 제거
      security:
        - bearerAuth: []
      operationId: removeParticipant
      parameters:
        - $ref: '#/components/parameters/tripId'
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: 제거 성공 (No Content)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /places/search:
    get:
      tags: [Place - Core]
      summary: 장소 검색
      security:
        - bearerAuth: []
      operationId: searchPlaces
      parameters:
        - name: keyword
          in: query
          schema: { type: string }
        - name: category
          in: query
          schema: { type: string }
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /places/{placeId}:
    get:
      tags: [Place - Core]
      summary: 장소 상세 조회
      security:
        - bearerAuth: []
      operationId: getPlaceDetails
      parameters:
        - $ref: '#/components/parameters/placeId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /trips/{tripId}/reservations:
    post:
      tags: [Reservation - Core]
      summary: 예약 추가
      security:
        - bearerAuth: []
      operationId: createReservation
      parameters:
        - $ref: '#/components/parameters/tripId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReservationRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    get:
      tags: [Reservation - Core]
      summary: 특정 여행의 예약 목록 조회
      security:
        - bearerAuth: []
      operationId: getReservationsForTrip
      parameters:
        - $ref: '#/components/parameters/tripId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReservationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /trips/{tripId}/reservations/{reservationId}:
    patch:
      tags: [Reservation - Core]
      summary: 예약 상태/메모 수정
      security:
        - bearerAuth: []
      operationId: updateReservation
      parameters:
        - $ref: '#/components/parameters/tripId'
        - $ref: '#/components/parameters/reservationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReservationRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /trips/{tripId}/weather/summary:
    get:
      tags: [Weather - Core]
      summary: 일정 기반 날씨 요약 조회
      security:
        - bearerAuth: []
      operationId: getWeatherSummary
      parameters:
        - $ref: '#/components/parameters/tripId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherSummaryResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 사용자 인증용 JWT 토큰
  parameters:
    tripId:
      name: tripId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    placeId:
      name: placeId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    reservationId:
      name: reservationId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    CreateTripRequest:
      type: object
      required: [title, startDate, endDate]
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    UpdateTripRequest:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        status: { type: string }

    TripResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        description: { type: string }
        startDate: { type: string, format: date }
        endDate: { type: string, format: date }
        status: { type: string }
        budget:
          type: object
          properties:
            currency: { type: string }
            totalMinor: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }

    CreateScheduleRequest:
      type: object
      required: [date, startTime, endTime, title]
      properties:
        date: { type: string, format: date }
        startTime: { type: string }
        endTime: { type: string }
        title: { type: string }
        memo: { type: string }
        placeId: { type: string, format: uuid }
        costMinor: { type: integer }

    CreateChecklistItemRequest:
      type: object
      required: [text]
      properties:
        text: { type: string }
        checked: { type: boolean }
        sortOrder: { type: integer }

    InviteParticipantRequest:
      type: object
      required: [userId, role]
      properties:
        userId:
          type: string
          format: uuid
          description: "초대할 사용자의 ID"
        role:
          type: string
          enum: [EDITOR, VIEWER]
          description: "부여할 권한"

    RemoveParticipantRequest:
      type: object
      required: [userId]
      properties:
        userId:
          type: string
          format: uuid
          description: "제거할 사용자의 ID"

    PlaceResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        source: { type: string }
        externalId: { type: string }
        name: { type: string }
        location: { type: object }
        detail: { type: object }
        cachedAt: { type: string, format: date-time }

    CreateReservationRequest:
      type: object
      required: [type, vendor, startAt, endAt, amountMinor, currency]
      properties:
        type: { type: string, enum: [hotel, flight, tour, etc] }
        vendor: { type: string }
        refCode: { type: string }
        startAt: { type: string, format: date-time }
        endAt: { type: string, format: date-time }
        amountMinor: { type: integer }
        currency: { type: string }
        notes: { type: string }

    UpdateReservationRequest:
      type: object
      properties:
        status: { type: string, enum: [PENDING, CONFIRMED, CANCELED] }
        notes: { type: string }

    ReservationResponse:
      type: object
      properties:
        id: { type: string, format: uuid }
        type: { type: string, enum: [hotel, flight, tour, etc] }
        vendor: { type: string }
        refCode: { type: string }
        startAt: { type: string, format: date-time }
        endAt: { type: string, format: date-time }
        amountMinor: { type: integer }
        currency: { type: string }
        status: { type: string, enum: [PENDING, CONFIRMED, CANCELED] }
        notes: { type: string }
        updatedAt: { type: string, format: date-time }

    WeatherSummaryResponse:
      type: array
      items:
        type: object
        properties:
          date: { type: string, format: date }
          icon: { type: string, description: "날씨 아이콘 코드 (e.g., '01d')" }
          tips:
            type: array
            items:
              type: string
            description: "날씨 관련 팁 (e.g., '우산을 챙기세요')"
          alerts:
            type: array
            items:
              type: string
            description: "주의보/경보 메시지"

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
        timestamp:
          type: string
          format: date-time
  
  responses:
    BadRequestError:
      description: 잘못된 요청 (유효성 검사 실패 등)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: TRIP_001
            message: "요청 값이 유효하지 않습니다."
            timestamp: "2024-01-25T10:00:00Z"

    UnauthorizedError:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: AUTH_001
            message: "인증이 필요합니다."
            timestamp: "2024-01-25T10:00:00Z"

    NotFoundError:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: TRIP_404
            message: "여행 계획을 찾을 수 없습니다."
            timestamp: "2024-01-25T10:00:00Z"
            
    ConflictError:
      description: 충돌 발생 (상태 전이 위반, 중복 등)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: TRIP_009
            message: "이미 완료된 여행의 상태는 변경할 수 없습니다."
            timestamp: "2024-01-25T10:00:00Z"
