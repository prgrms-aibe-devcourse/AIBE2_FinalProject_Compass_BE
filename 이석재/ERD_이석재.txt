---

# Day 0: 프로젝트 기초 설계 – TDD 시작 전 준비 (정리본)

## Step 1. 유스케이스 정의 ([finalteamproject-aca78.web.app][1])

### 1.1 액터(Actors)

* **여행자(Traveler)**: 여행 계획/일정/예약을 관리하고 날씨 요약·알림을 쓰는 일반 사용자.
* **AI 어시스턴트**: 장소/경로/날씨 추천 응답 및 자동화 보조.
* **시스템 관리자(Admin)**: 서비스 모니터링/오류 대응.
  (액터 파악 및 역할 구분은 가이드에 따름. ([finalteamproject-aca78.web.app][1]))

### 1.2 유스케이스 다이어그램 (PlantUML)

가이드 다이어그램 형식을 따름. ([finalteamproject-aca78.web.app][1])

```
@startuml
left to right direction
actor "여행자" as traveler
actor "AI Assistant" as ai
actor "관리자" as admin

rectangle "Compass Trip System" {
  usecase "여행 계획 생성/수정" as UC_T
  usecase "일정 아이템 관리" as UC_S
  usecase "체크리스트 관리" as UC_C
  usecase "참여자 초대/제거" as UC_Part
  usecase "장소 검색/상세/추가" as UC_P
  usecase "경로/이동시간 계산" as UC_Route
  usecase "예약 추가/상태/조회" as UC_R
  usecase "날씨 조회/요약/알림/대체코스" as UC_W
  usecase "시스템 모니터링" as UC_Admin
}

traveler --> UC_T
traveler --> UC_S
traveler --> UC_C
traveler --> UC_Part
traveler --> UC_P
traveler --> UC_Route
traveler --> UC_R
traveler --> UC_W

UC_P --> UC_Route : include
UC_S --> UC_P : include

ai --> UC_W
admin --> UC_Admin
@enduml
```

### 1.3 유스케이스 시나리오 (가이드 템플릿 적용) ([finalteamproject-aca78.web.app][1])

#### UC-T001 여행 계획 생성

* **액터**: 여행자
* **사전조건**: 로그인/JWT 유효
* **기본 흐름**:

  1. 제목/설명/시작일/종료일 입력 → 2) 기간 검증(시작 ≤ 종료) → 3) 상태 `PLANNING`으로 생성 → 4) 예산/체크리스트 초기화 → 5) 여행 ID 반환·목록 반영
* **대체 흐름**:
  2a) 기간 오류 → 에러 반환, 생성 취소
  1a) 필수값 누락 → 에러 반환
* **사후조건**: 새 Trip 레코드 생성, 상태 PLANNING

#### UC-T002 여행 계획 수정/상태 변경

* **액터**: 여행자(권한 보유)
* **사전조건**: Trip 존재
* **기본 흐름**: 부분 변경(제목/설명/기간/예산/상태) → 일정 기간 충돌 검증 → 최신 스냅샷 반환, `updatedAt` 갱신
* **대체 흐름**: 권한 없음/완료·취소 상태 → 거부, 정책 메시지
* **사후조건**: Trip 갱신

#### UC-T003 일정 아이템 관리(추가/수정/삭제)

* **액터**: 여행자
* **사전조건**: Trip 존재, 날짜가 여행 기간 내
* **기본 흐름**: 날짜·시간·제목·메모·장소·비용 입력 → 시간 겹침 검토 → 반영 → 삭제 시 알림/예약 링크 정리
* **대체 흐름**: 기간 밖/시간 형식 오류/권한 없음 → 거부
* **사후조건**: 타임라인 최신화(정렬은 `order`)

#### UC-T004 체크리스트 관리

* **액터**: 여행자
* **사전조건**: Trip 존재
* **기본 흐름**: 아이템 추가 → 체크/언체크 → 텍스트 수정 → 완료율 계산/반환
* **대체 흐름**: 빈 텍스트/권한 없음 → 거부
* **사후조건**: 체크리스트 최신 저장(공동편집 시 낙관적 락)

#### UC-T005 참여자 초대/제거

* **액터**: 여행자(소유자/에디터)
* **사전조건**: 대상 사용자 존재
* **기본 흐름**: userId 제출 → 중복 확인 → 권한(EDIT/VIEW) 부여 → 알림 발송
* **대체 흐름**: 자기 자신/이미 참여/대상 없음 → 거부
* **사후조건**: 참가자 목록 갱신 (수락은 별도)

#### UC-P001 장소 검색 / UC-P003 장소 상세 / UC-P002 일정에 장소 추가 / UC-P005 경로 계산

* 검색: 내부 DB → 부족 시 외부 API, 정규화/중복 제거, 페이지네이션
* 상세: 캐시 우선, 만료 시 외부API 갱신
* 일정 추가: 상세 없으면 upsert, 충돌/기간 검증
* 경로: 모드 선택 → 지도 API → 거리/시간/경로, 옵션으로 일정 반영

#### UC-R001 예약 추가 / UC-R002 예약 상태 변경 / UC-R003 예약 조회 / UC-R005 메일 파싱

* 예약 추가: 기간/중복 검증, `PENDING` 생성
* 상태: `PENDING→CONFIRMED|CANCELED`, 환불메모/알림 갱신
* 조회: tripId 목록/상세, 통화 합계 옵션
* 메일 파싱: 벤더 패턴→임시 예약→사용자 확인 (보안·동의)

#### UC-W001 현재/예보 / UC-W002 일정 기반 요약 / UC-W003 알림 구독 / UC-W004 대체 코스

* 현재/예보: 좌표 기준 최대 14일
* 요약: 일정 날짜×좌표 매칭, 배지/경고
* 구독: 시간대·임계치 등록→스케줄 조회→조건 시 알림
* 대체: 비/폭염 등 조건 시 대체 장소 제안

---

## Step 2. 요구사항 명세서 (기능/비기능/제약) ([finalteamproject-aca78.web.app][1])

### 2.1 기능적 요구사항(발췌; 도메인별 FR ID)

* **TRIP**

  * FR-TRIP-001: 여행 계획 생성(PLANNING)
  * FR-TRIP-002: 계획 부분 수정/상태 전이 검증
  * FR-TRIP-003: 일정 아이템 CRUD, 시간 겹침 금지
  * FR-TRIP-004: 체크리스트 CRUD, 완료율 계산
  * FR-TRIP-005: 참여자 초대/제거(권한: EDIT/VIEW)
* **PLACE/ROUTE**

  * FR-PLACE-001: 키워드/필터/좌표 검색(내부→외부, 정규화·중복제거, 페이지네이션)
  * FR-PLACE-002: 장소 상세 캐시/만료 갱신
  * FR-PLACE-003: 일정에 장소 연결
  * FR-ROUTE-001: 경로/시간/거리 계산(캐시)
* **RESERVATION**

  * FR-RESV-001: 예약 추가(PENDING), 기간/중복 검증
  * FR-RESV-002: 예약 상태 전이/메모/알림 갱신
  * FR-RESV-003: 예약 목록/상세 + 통화 합계
  * FR-RESV-004: 예약 메일 파싱(임시→확정)
* **WEATHER**

  * FR-WEATHER-001: 현재/예보 조회(≤14일)
  * FR-WEATHER-002: 일정 기반 요약
  * FR-WEATHER-003: 알림 구독/해지(현지 TZ)
  * FR-WEATHER-004: 대체 코스 제안

### 2.2 비기능적 요구사항(가이드 문구 반영)

* 성능: API 응답 **3초 이내**
* 가용성: **99.9%**
* 보안: **JWT + HTTPS**
* 확장성: 동시 사용자 **1,000명** 처리
* 사용성: **RESTful** 원칙 준수. ([finalteamproject-aca78.web.app][1])

### 2.3 제약사항(가이드 기준)

* **Spring Boot 3.x / Java 17+**, **PostgreSQL 15**, **OpenAI GPT-4**
* 개발 기간: **2주(MVP)** / **4주(완성)**
* 예산: OpenAI 월 **\$100** 한도. ([finalteamproject-aca78.web.app][1])

---

## Step 3. ERD 설계 (가이드의 “엔티티 항목 나열” 형식 준수) ([finalteamproject-aca78.web.app][1])

### 3.1 핵심 엔티티(명사 도출) & 필드

**User**

* id: UUID (PK)
* email: String (UNIQUE)
* nickname: String
* passwordHash: String
* createdAt: Timestamp

**Trip**

* id: UUID (PK)
* ownerId: UUID (FK → User)
* title: String
* description: Text
* startDate: Date
* endDate: Date
* status: Enum(PLANNING, ACTIVE, COMPLETED, CANCELED)
* budget: JSON (currency, totalMinor)
* createdAt / updatedAt: Timestamp

**TripParticipant**

* id: UUID (PK)
* tripId: UUID (FK → Trip)
* userId: UUID (FK → User)
* role: Enum(OWNER, EDITOR, VIEWER)
* invitedAt: Timestamp
* **UNIQUE**(tripId, userId)

**ChecklistItem**

* id: UUID (PK)
* tripId: UUID (FK → Trip)
* text: Text
* checked: Boolean
* sortOrder: Int
* updatedAt: Timestamp

**ScheduleItem**

* id: UUID (PK)
* tripId: UUID (FK → Trip)
* date: Date
* startTime / endTime: Time
* title: String
* memo: Text
* placeId: UUID (FK → Place, nullable)
* costMinor: Int
* sortOrder: Int
* updatedAt: Timestamp

**Place** *(캐시)*

* id: UUID (PK)
* source: String(예: google, kakao)
* externalId: String
* name: String
* location: JSON(lat,lng,address)
* detail: JSON(openingHours, phone …)
* cachedAt: Timestamp
* **UNIQUE**(source, externalId)

**Reservation**

* id: UUID (PK)
* tripId: UUID (FK → Trip)
* type: String(hotel|flight|tour|etc)
* vendor: String
* refCode: String
* startAt / endAt: Timestamp
* amountMinor: Int, currency: String
* status: Enum(PENDING, CONFIRMED, CANCELED)
* notes: Text
* updatedAt: Timestamp

**WeatherSubscription**

* id: UUID (PK)
* userId: UUID (FK → User)
* tripId: UUID (FK → Trip)
* notifyTimeLocal: Time
* thresholds: JSON(rainProb,tempMin,tempMax…)
* tz: String(예: Asia/Seoul)
* active: Boolean
* **UNIQUE**(userId, tripId)

### 3.2 관계

* User 1–N Trip(소유) / 1–N TripParticipant
* Trip 1–N ChecklistItem / 1–N ScheduleItem / 1–N Reservation
* ScheduleItem N–1 Place(옵션)
* Reservation N–0..N ScheduleItem(옵션 링크)
* User 1–N WeatherSubscription

### 3.3 ERD DDL 예시 (가이드의 SQL 블록 형식 준용) ([finalteamproject-aca78.web.app][1])

```sql
-- Trip
CREATE TABLE trips (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  owner_id UUID NOT NULL,
  title VARCHAR(200) NOT NULL,
  description TEXT,
  start_date DATE NOT NULL,
  end_date   DATE NOT NULL,
  status VARCHAR(20) NOT NULL DEFAULT 'PLANNING',
  budget JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT chk_trip_dates CHECK (start_date <= end_date)
);

CREATE INDEX idx_trip_owner ON trips(owner_id);
CREATE INDEX idx_trip_period ON trips(start_date, end_date);

-- ScheduleItem (시간 겹침은 트리거나 앱 레벨 검증 권장)
CREATE TABLE schedule_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  trip_id UUID NOT NULL,
  date DATE NOT NULL,
  start_time TIME NOT NULL,
  end_time   TIME NOT NULL,
  title VARCHAR(200) NOT NULL,
  memo TEXT,
  place_id UUID,
  cost_minor INT,
  sort_order INT,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_sched_trip_date ON schedule_items(trip_id, date, start_time, end_time);

-- Place (캐시)
CREATE TABLE places (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  source VARCHAR(50) NOT NULL,
  external_id VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  location JSONB,
  detail JSONB,
  cached_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UNIQUE(source, external_id)
);
```

---

## Step 4. 요구사항 → API 명세 도출(표) & DTO 매핑 ([finalteamproject-aca78.web.app][1])

### 4.1 요구사항 → 엔드포인트 매핑(발췌)

| FR             | 설명         | 엔드포인트                                                        |            |
| -------------- | ---------- | ------------------------------------------------------------ | ---------- |
| FR-TRIP-001    | 여행 생성      | **POST** `/api/trips`                                        |            |
| FR-TRIP-002    | 여행 부분수정/상태 | **PATCH** `/api/trips/{tripId}`                              |            |
| FR-TRIP-003    | 일정 CRUD    | \*\*/api/trips/{tripId}/schedules` (POST/PATCH/DELETE/GET)`  |            |
| FR-TRIP-004    | 체크리스트      | \*\*/api/trips/{tripId}/checklist` (POST/PATCH/DELETE/GET)`  |            |
| FR-TRIP-005    | 참여자 초대/제거  | **POST/DELETE** `/api/trips/{tripId}/participants`           |            |
| FR-PLACE-001   | 장소 검색      | **GET** `/api/places/search`                                 |            |
| FR-PLACE-002   | 장소 상세      | **GET** `/api/places/{placeId}`                              |            |
| FR-PLACE-003   | 일정에 장소 연결  | **POST** `/api/trips/{tripId}/schedules/{scheduleId}/place`  |            |
| FR-ROUTE-001   | 경로 계산      | **GET** `/api/routes`                                        |            |
| FR-RESV-001    | 예약 추가      | **POST** `/api/trips/{tripId}/reservations`                  |            |
| FR-RESV-002    | 예약 상태/메모   | **PATCH** `/api/trips/{tripId}/reservations/{reservationId}` |            |
| FR-RESV-003    | 예약 목록/상세   | **GET** `/api/trips/{tripId}/reservations[/{reservationId}]` |            |
| FR-RESV-004    | 메일 파싱      | **POST** `/api/reservations/email/ingest`                    |            |
| FR-WEATHER-001 | 현재/예보      | **GET** \`/api/weather/current                               | forecast\` |
| FR-WEATHER-002 | 일정 기반 요약   | **GET** `/api/trips/{tripId}/weather/summary`                |            |
| FR-WEATHER-003 | 알림 구독/해지   | **POST/DELETE** `/api/trips/{tripId}/weather/subscription`   |            |

### 4.2 ERD → DTO 매핑(가이드 규칙 준수: Request/Response 분리, 민감정보 최소화) ([finalteamproject-aca78.web.app][1])

* **CreateTripRequest**: `{ title, description?, startDate, endDate }`
* **TripResponse**: `{ id, title, description, startDate, endDate, status, budget?, createdAt, updatedAt }`
* **CreateScheduleRequest**: `{ date, startTime, endTime, title, memo?, placeId?, costMinor? }`
* **ScheduleItemResponse**: `{ id, date, startTime, endTime, title, memo, placeId, costMinor, sortOrder }`
* **SearchPlacesResponse**(정규화): `{ id, name, category, lat, lng, address, source }[]`
* **CreateReservationRequest**: `{ type, vendor, refCode?, startAt, endAt, amountMinor, currency }`
* **ReservationResponse**: `{ id, type, vendor, refCode, startAt, endAt, amountMinor, currency, status, notes }`
* **WeatherSummaryResponse**: `{ date, icon, tips[], alerts[] }[]`

---

## Step 5. API 스켈레톤 (OpenAPI 3.0, 발췌) ([finalteamproject-aca78.web.app][1])

```yaml
openapi: 3.0.3
info: { title: Trip System API, version: 0.1.0 }
servers: [{ url: /api }]
components:
  securitySchemes:
    bearerAuth: { type: http, scheme: bearer, bearerFormat: JWT }
  schemas:
    TripStatus: { type: string, enum: [PLANNING, ACTIVE, COMPLETED, CANCELED] }
    ReservationStatus: { type: string, enum: [PENDING, CONFIRMED, CANCELED] }
    Trip:
      type: object
      required: [id,title,startDate,endDate,status]
      properties:
        id: { type: string, format: uuid }
        title: { type: string } 
        description: { type: string }
        startDate: { type: string, format: date }
        endDate:   { type: string, format: date }
        status: { $ref: '#/components/schemas/TripStatus' }
        budget:
          type: object
          properties: { currency: {type: string}, total: {type: integer} }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
security: [ { bearerAuth: [] } ]
paths:
  /trips:
    post:
      summary: Create Trip
      requestBody:
        required: true
        content: { application/json: { schema:
          type: object, required: [title,startDate,endDate],
          properties: { title:{type:string}, description:{type:string},
            startDate:{type:string,format:date}, endDate:{type:string,format:date} } } }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Trip' }}}}
        '400': { description: Validation error }
    get:
      summary: List Trips
      responses: { '200': { description: OK } }
  /trips/{tripId}:
    patch:
      summary: Patch Trip
      parameters: [ { in: path, name: tripId, required: true, schema: {type:string, format:uuid} } ]
      requestBody:
        content: { application/json: { schema:
          type: object, properties: { title:{type:string}, description:{type:string},
            startDate:{type:string,format:date}, endDate:{type:string,format:date},
            status:{ $ref: '#/components/schemas/TripStatus' } } } }
      responses:
        '200': { description: OK }
        '409': { description: Conflict (overlap / invalid state transition) }
  /trips/{tripId}/schedules:
    post:
      summary: Create Schedule Item
      requestBody:
        content: { application/json: { schema:
          type: object, required:[date,startTime,endTime,title],
          properties: { date:{type:string,format:date}, startTime:{type:string},
            endTime:{type:string}, title:{type:string}, memo:{type:string}, placeId:{type:string,format:uuid} } } }
      responses: { '201': { description: Created }, '409': { description: Time overlap } }
  /places/search:
    get:
      summary: Search Places
      parameters:
        - { in: query, name: keyword, schema: {type:string} }
        - { in: query, name: category, schema: {type:string} }
        - { in: query, name: lat, schema: {type:number, format:double} }
        - { in: query, name: lng, schema: {type:number, format:double} }
        - { in: query, name: radius, schema: {type:integer} }
      responses: { '200': { description: OK } }
  /weather/forecast:
    get:
      summary: Forecast
      parameters:
        - { in: query, name: lat, required: true, schema: {type:number} }
        - { in: query, name: lng, required: true, schema: {type:number} }
        - { in: query, name: days, schema: {type:integer, default: 14} }
      responses: { '200': { description: OK } }
```

(OpenAPI 작성법·구성은 페이지 스펙 섹션 흐름을 따름. ([finalteamproject-aca78.web.app][1]))

---

## 에러 코드 설계(표준 HTTP 상태) ([finalteamproject-aca78.web.app][1])

* **200 OK**: 조회/수정 성공
* **201 Created**: 생성 성공
* **400 Bad Request**: 유효성 실패(기간/필수값/시간 겹침 등)
* **401 Unauthorized**: 인증 실패(JWT 없음/만료)
* **404 Not Found**: 리소스 없음(tripId/placeId 등)
* **409 Conflict**: 일정 겹침/상태 전이 위반
* **500 Internal Server Error**: 서버 오류

---

