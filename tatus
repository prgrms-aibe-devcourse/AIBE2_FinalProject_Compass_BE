package com.compass.domain.trip;

import com.compass.domain.common.BaseEntity;
import jakarta.persistence.*;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.Where;
import org.hibernate.type.SqlTypes;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@Getter
@Entity
@Table(name = "trips")
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@SQLDelete(sql = "UPDATE trips SET deleted_at = NOW() WHERE id = ?")
@Where(clause = "deleted_at IS NULL")
public class Trip extends BaseEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(columnDefinition = "uuid", updatable = false, nullable = false)
    private UUID tripUuid = UUID.randomUUID();

    // TODO: Ï∂îÌõÑ User ÏóîÌã∞Ìã∞ÏôÄ Ïó∞Í¥ÄÍ¥ÄÍ≥Ñ ÏÑ§Ï†ï
    private Long userId;

    // TODO: Ï∂îÌõÑ ChatThread ÏóîÌã∞Ìã∞ÏôÄ Ïó∞Í¥ÄÍ¥ÄÍ≥Ñ ÏÑ§Ï†ï
    private Long threadId;
    
    private String title;

    private String destination;

    private LocalDate startDate;

    private LocalDate endDate;
    
    private Integer numberOfPeople;

    private Integer totalBudget;

    private String status = "PLANNING";

    @JdbcTypeCode(SqlTypes.JSON)
    @Column(columnDefinition = "jsonb")
    private String tripMetadata;

    @Version
    private Integer version;

    private LocalDateTime deletedAt;

    @OneToMany(mappedBy = "trip", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<TripDetail> details = new ArrayList<>();

    @Builder
    public Trip(Long userId, Long threadId, String title, String destination, LocalDate startDate, LocalDate endDate, Integer numberOfPeople, Integer totalBudget, String status, String tripMetadata) {
        this.userId = userId;
        this.threadId = threadId;
        this.title = title;
        this.destination = destination;
        this.startDate = startDate;
        this.endDate = endDate;
        this.numberOfPeople = numberOfPeople;
        this.totalBudget = totalBudget;
        this.status = (status != null) ? status : "PLANNING";
        this.tripMetadata = tripMetadata;
    }

    public void addDetail(TripDetail detail) {
        details.add(detail);
        detail.setTrip(this);
    }
}
[1mdiff --git a/src/main/java/com/compass/config/SwaggerConfig.java b/src/main/java/com/compass/config/SwaggerConfig.java[m
[1mindex 190799e..d0724a3 100644[m
[1m--- a/src/main/java/com/compass/config/SwaggerConfig.java[m
[1m+++ b/src/main/java/com/compass/config/SwaggerConfig.java[m
[36m@@ -1,65 +1,33 @@[m
 package com.compass.config;[m
 [m
[31m-import io.swagger.v3.oas.models.Components;[m
 import io.swagger.v3.oas.models.OpenAPI;[m
[31m-import io.swagger.v3.oas.models.info.Contact;[m
 import io.swagger.v3.oas.models.info.Info;[m
[31m-import io.swagger.v3.oas.models.info.License;[m
[31m-import io.swagger.v3.oas.models.security.SecurityRequirement;[m
[32m+[m[32mimport io.swagger.v3.oas.models.info.Contact;[m
[32m+[m[32mimport io.swagger.v3.oas.models.Components;[m
 import io.swagger.v3.oas.models.security.SecurityScheme;[m
[31m-import io.swagger.v3.oas.models.servers.Server;[m
[31m-import org.springframework.beans.factory.annotation.Value;[m
[32m+[m[32mimport io.swagger.v3.oas.models.security.SecurityRequirement;[m
 import org.springframework.context.annotation.Bean;[m
 import org.springframework.context.annotation.Configuration;[m
 [m
[31m-import java.util.List;[m
[31m-[m
[31m-/**[m
[31m- * Swagger/OpenAPI Configuration[m
[31m- */[m
 @Configuration[m
 public class SwaggerConfig {[m
[31m-    [m
[31m-    @Value("${spring.application.name:Compass}")[m
[31m-    private String applicationName;[m
[31m-    [m
[32m+[m
     @Bean[m
[31m-    public OpenAPI openAPI() {[m
[31m-        // JWT Security Scheme[m
[31m-        SecurityScheme securityScheme = new SecurityScheme()[m
[31m-                .type(SecurityScheme.Type.HTTP)[m
[31m-                .scheme("bearer")[m
[31m-                .bearerFormat("JWT")[m
[31m-                .in(SecurityScheme.In.HEADER)[m
[31m-                .name("Authorization");[m
[31m-        [m
[31m-        // Security Requirement[m
[31m-        SecurityRequirement securityRequirement = new SecurityRequirement()[m
[31m-                .addList("bearerAuth");[m
[31m-        [m
[31m-        // Server Configuration[m
[31m-        Server localServer = new Server()[m
[31m-                .url("http://localhost:8080")[m
[31m-                .description("Local Development Server");[m
[31m-        [m
[31m-        Server prodServer = new Server()[m
[31m-                .url("https://api.compass.com")[m
[31m-                .description("Production Server");[m
[31m-        [m
[32m+[m[32m    public OpenAPI customOpenAPI() {[m
         return new OpenAPI()[m
                 .info(new Info()[m
[31m-                        .title(applicationName + " API")[m
[31m-                        .description("AI-powered personalized travel planning service API")[m
[32m+[m[32m                        .title("Compass API")[m
[32m+[m[32m                        .description("Ïó¨Ìñâ Í≥ÑÌöç ÏÉùÏÑ± Î∞è Í¥ÄÎ¶¨ API - Updated")[m
                         .version("1.0.0")[m
                         .contact(new Contact()[m
                                 .name("Compass Team")[m
[31m-                                .email("team@compass.com"))[m
[31m-                        .license(new License()[m
[31m-                                .name("Apache 2.0")[m
[31m-                                .url("http://www.apache.org/licenses/LICENSE-2.0")))[m
[31m-                .servers(List.of(localServer, prodServer))[m
[32m+[m[32m                                .email("contact@compass.com")))[m
                 .components(new Components()[m
[31m-                        .addSecuritySchemes("bearerAuth", securityScheme))[m
[31m-                .security(List.of(securityRequirement));[m
[32m+[m[32m                        .addSecuritySchemes("bearerAuth",[m
[32m+[m[32m                                new SecurityScheme()[m
[32m+[m[32m                                        .type(SecurityScheme.Type.HTTP)[m
[32m+[m[32m                                        .scheme("bearer")[m
[32m+[m[32m                                        .bearerFormat("JWT")))[m
[32m+[m[32m                .addSecurityItem(new SecurityRequirement().addList("bearerAuth"));[m
     }[m
[31m-}[m
\ No newline at end of file[m
[32m+[m[32m}[m
