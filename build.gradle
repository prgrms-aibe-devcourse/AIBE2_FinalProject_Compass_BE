plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.compass'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // 전역적으로 충돌하는 로깅 라이브러리를 제외하여 모든 테스트 오류를 해결합니다.
    all {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springAiVersion', "1.0.0-M5")
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Spring AI
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-vertex-ai-gemini-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-redis-store-spring-boot-starter'

    // Database
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2' // 개발 및 테스트 환경에서 모두 사용

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Java 8 Date/Time support for Jackson
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Dotenv loader
    implementation 'io.github.cdimascio:dotenv-java:3.0.0'

    // Swagger/OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // AWS SDK for S3
    implementation 'software.amazon.awssdk:s3:2.20.162'
    implementation 'software.amazon.awssdk:auth:2.20.162'
    
    // Hypersistence Utils for JSON support
    implementation 'io.hypersistence:hypersistence-utils-hibernate-62:3.6.1'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.h2database:h2'

    // Embedded Redis for testing
    testImplementation 'it.ozimov:embedded-redis:0.7.3'

    //env
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'
}

// Spring AI BOM
dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()

    // 테스트 실행 시 성공한 테스트도 표시
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = false
        exceptionFormat = "full"
    }
}

// 단위 테스트만 실행 (Redis 없이)
task unitTest(type: Test) {
    useJUnitPlatform {
        includeTags 'unit'
    }
    systemProperty 'spring.profiles.active', 'test-no-redis'
}

// 통합 테스트만 실행 (Redis 필요)
task integrationTest(type: Test) {
    useJUnitPlatform {
        includeTags 'integration'
    }
    systemProperty 'spring.profiles.active', 'test'
}

// JAR 파일 이름 설정
bootJar {
    archiveFileName = 'compass-backend.jar'
}